
Conv+Dive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000196  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ea  00000000  00000000  000003b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000160  00000000  00000000  000004a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000db  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000757  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  92:	6f 92       	push	r6
  94:	7f 92       	push	r7
  96:	9f 92       	push	r9
  98:	af 92       	push	r10
  9a:	bf 92       	push	r11
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	a4 97       	sbiw	r28, 0x24	; 36
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	int i,a[9]={1,2,4,8,16,32,64,128},b[9]={128,64,32,16,8,4,2,1};
  bc:	b2 e1       	ldi	r27, 0x12	; 18
  be:	9b 2e       	mov	r9, r27
  c0:	5e 01       	movw	r10, r28
  c2:	08 94       	sec
  c4:	a1 1c       	adc	r10, r1
  c6:	b1 1c       	adc	r11, r1
  c8:	f5 01       	movw	r30, r10
  ca:	89 2d       	mov	r24, r9
  cc:	11 92       	st	Z+, r1
  ce:	8a 95       	dec	r24
  d0:	e9 f7       	brne	.-6      	; 0xcc <main+0x3a>
  d2:	a1 e0       	ldi	r26, 0x01	; 1
  d4:	ca 2e       	mov	r12, r26
  d6:	d1 2c       	mov	r13, r1
  d8:	da 82       	std	Y+2, r13	; 0x02
  da:	c9 82       	std	Y+1, r12	; 0x01
  dc:	f2 e0       	ldi	r31, 0x02	; 2
  de:	ef 2e       	mov	r14, r31
  e0:	f1 2c       	mov	r15, r1
  e2:	fc 82       	std	Y+4, r15	; 0x04
  e4:	eb 82       	std	Y+3, r14	; 0x03
  e6:	04 e0       	ldi	r16, 0x04	; 4
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	1e 83       	std	Y+6, r17	; 0x06
  ec:	0d 83       	std	Y+5, r16	; 0x05
  ee:	a8 e0       	ldi	r26, 0x08	; 8
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	af 83       	std	Y+7, r26	; 0x07
  f6:	60 e1       	ldi	r22, 0x10	; 16
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	7a 87       	std	Y+10, r23	; 0x0a
  fc:	69 87       	std	Y+9, r22	; 0x09
  fe:	40 e2       	ldi	r20, 0x20	; 32
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	5c 87       	std	Y+12, r21	; 0x0c
 104:	4b 87       	std	Y+11, r20	; 0x0b
 106:	20 e4       	ldi	r18, 0x40	; 64
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	3e 87       	std	Y+14, r19	; 0x0e
 10c:	2d 87       	std	Y+13, r18	; 0x0d
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	98 8b       	std	Y+16, r25	; 0x10
 114:	8f 87       	std	Y+15, r24	; 0x0f
 116:	e3 e1       	ldi	r30, 0x13	; 19
 118:	6e 2e       	mov	r6, r30
 11a:	71 2c       	mov	r7, r1
 11c:	6c 0e       	add	r6, r28
 11e:	7d 1e       	adc	r7, r29
 120:	f3 01       	movw	r30, r6
 122:	11 92       	st	Z+, r1
 124:	9a 94       	dec	r9
 126:	e9 f7       	brne	.-6      	; 0x122 <main+0x90>
 128:	9c 8b       	std	Y+20, r25	; 0x14
 12a:	8b 8b       	std	Y+19, r24	; 0x13
 12c:	3e 8b       	std	Y+22, r19	; 0x16
 12e:	2d 8b       	std	Y+21, r18	; 0x15
 130:	58 8f       	std	Y+24, r21	; 0x18
 132:	4f 8b       	std	Y+23, r20	; 0x17
 134:	7a 8f       	std	Y+26, r23	; 0x1a
 136:	69 8f       	std	Y+25, r22	; 0x19
 138:	bc 8f       	std	Y+28, r27	; 0x1c
 13a:	ab 8f       	std	Y+27, r26	; 0x1b
 13c:	1e 8f       	std	Y+30, r17	; 0x1e
 13e:	0d 8f       	std	Y+29, r16	; 0x1d
 140:	f8 a2       	std	Y+32, r15	; 0x20
 142:	ef 8e       	std	Y+31, r14	; 0x1f
 144:	da a2       	std	Y+34, r13	; 0x22
 146:	c9 a2       	std	Y+33, r12	; 0x21
	DDRC=0XFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
	  for(i=0;i<9;i++)
	  {
		PORTC=a[i];
 150:	d5 01       	movw	r26, r10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	48 ea       	ldi	r20, 0xA8	; 168
 154:	51 e6       	ldi	r21, 0x61	; 97
 156:	6a ef       	ldi	r22, 0xFA	; 250
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ea 0f       	add	r30, r26
 162:	fb 1f       	adc	r31, r27
 164:	80 81       	ld	r24, Z
 166:	85 bb       	out	0x15, r24	; 21
 168:	ca 01       	movw	r24, r20
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xd8>
		_delay_ms(100);
		PORTC=b[i];
 16e:	82 89       	ldd	r24, Z+18	; 0x12
 170:	85 bb       	out	0x15, r24	; 21
 172:	ca 01       	movw	r24, r20
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xe2>
		_delay_ms(100);
		PORTC=0X00;
 178:	15 ba       	out	0x15, r1	; 21
 17a:	cb 01       	movw	r24, r22
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xea>
{
	int i,a[9]={1,2,4,8,16,32,64,128},b[9]={128,64,32,16,8,4,2,1};
	DDRC=0XFF;
	while(1)
	{
	  for(i=0;i<9;i++)
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	29 30       	cpi	r18, 0x09	; 9
 186:	31 05       	cpc	r19, r1
 188:	44 f3       	brlt	.-48     	; 0x15a <main+0xc8>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	e5 cf       	rjmp	.-54     	; 0x15a <main+0xc8>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
