
DivergeLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001bc  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000101  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017d  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ef  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	64 97       	sbiw	r28, 0x14	; 20
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	int i,a[5]={8,4,2,1},b[5]={16,32,64,128};
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	de 01       	movw	r26, r28
  aa:	11 96       	adiw	r26, 0x01	; 1
  ac:	fd 01       	movw	r30, r26
  ae:	82 2f       	mov	r24, r18
  b0:	11 92       	st	Z+, r1
  b2:	8a 95       	dec	r24
  b4:	e9 f7       	brne	.-6      	; 0xb0 <main+0x1e>
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9c 83       	std	Y+4, r25	; 0x04
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9e 83       	std	Y+6, r25	; 0x06
  cc:	8d 83       	std	Y+5, r24	; 0x05
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	98 87       	std	Y+8, r25	; 0x08
  d4:	8f 83       	std	Y+7, r24	; 0x07
  d6:	ce 01       	movw	r24, r28
  d8:	0b 96       	adiw	r24, 0x0b	; 11
  da:	fc 01       	movw	r30, r24
  dc:	11 92       	st	Z+, r1
  de:	2a 95       	dec	r18
  e0:	e9 f7       	brne	.-6      	; 0xdc <main+0x4a>
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9c 87       	std	Y+12, r25	; 0x0c
  e8:	8b 87       	std	Y+11, r24	; 0x0b
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9e 87       	std	Y+14, r25	; 0x0e
  f0:	8d 87       	std	Y+13, r24	; 0x0d
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	98 8b       	std	Y+16, r25	; 0x10
  f8:	8f 87       	std	Y+15, r24	; 0x0f
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9a 8b       	std	Y+18, r25	; 0x12
 100:	89 8b       	std	Y+17, r24	; 0x11
	DDRC=0XFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 bb       	out	0x14, r24	; 20
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10a:	49 e1       	ldi	r20, 0x19	; 25
 10c:	50 e0       	ldi	r21, 0x00	; 0
	while(1)
	{
	  for(i=0;i<5;i++)
	  {
		PORTC=a[i];
 10e:	6a ef       	ldi	r22, 0xFA	; 250
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ea 0f       	add	r30, r26
 11a:	fb 1f       	adc	r31, r27
 11c:	80 81       	ld	r24, Z
 11e:	85 bb       	out	0x15, r24	; 21
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	97 e2       	ldi	r25, 0x27	; 39
 124:	fa 01       	movw	r30, r20
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x92>
		_delay_ms(1000);
		PORTC=b[i];
 12e:	f9 01       	movw	r30, r18
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ea 0f       	add	r30, r26
 136:	fb 1f       	adc	r31, r27
 138:	82 85       	ldd	r24, Z+10	; 0x0a
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	97 e2       	ldi	r25, 0x27	; 39
 140:	fa 01       	movw	r30, r20
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 148:	d9 f7       	brne	.-10     	; 0x140 <main+0xae>
		_delay_ms(1000);
		PORTC=0X00;
 14a:	15 ba       	out	0x15, r1	; 21
 14c:	cb 01       	movw	r24, r22
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xbc>
{
	int i,a[5]={8,4,2,1},b[5]={16,32,64,128};
	DDRC=0XFF;
	while(1)
	{
	  for(i=0;i<5;i++)
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	25 30       	cpi	r18, 0x05	; 5
 158:	31 05       	cpc	r19, r1
 15a:	dc f2       	brlt	.-74     	; 0x112 <main+0x80>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	d8 cf       	rjmp	.-80     	; 0x112 <main+0x80>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
