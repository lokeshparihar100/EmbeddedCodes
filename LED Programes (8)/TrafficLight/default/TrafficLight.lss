
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ce  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000117  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a1  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e1  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000190  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  92:	2f 92       	push	r2
  94:	3f 92       	push	r3
  96:	4f 92       	push	r4
  98:	5f 92       	push	r5
  9a:	6f 92       	push	r6
  9c:	7f 92       	push	r7
  9e:	8f 92       	push	r8
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	64 97       	sbiw	r28, 0x14	; 20
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	int a[10]={64,121,36,48,25,18,2,120,0,16};
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	e0 e6       	ldi	r30, 0x60	; 96
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	84 e1       	ldi	r24, 0x14	; 20
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3e>
	DDRA=0XFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26
	DDRC=0XFF;
  dc:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFF;
  de:	81 bb       	out	0x11, r24	; 17
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	be 01       	movw	r22, r28
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
			{
				PORTA=2;
  ea:	12 e0       	ldi	r17, 0x02	; 2
  ec:	21 2e       	mov	r2, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	b8 ea       	ldi	r27, 0xA8	; 168
  f0:	ab 2e       	mov	r10, r27
  f2:	b1 e6       	ldi	r27, 0x61	; 97
  f4:	bb 2e       	mov	r11, r27
				_delay_ms(100);
				PORTD=4;
  f6:	a4 e0       	ldi	r26, 0x04	; 4
  f8:	3a 2e       	mov	r3, r26
  fa:	fa ef       	ldi	r31, 0xFA	; 250
  fc:	cf 2e       	mov	r12, r31
  fe:	d1 2c       	mov	r13, r1
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
 100:	e4 ec       	ldi	r30, 0xC4	; 196
 102:	ee 2e       	mov	r14, r30
 104:	e9 e0       	ldi	r30, 0x09	; 9
 106:	fe 2e       	mov	r15, r30
 108:	55 e1       	ldi	r21, 0x15	; 21
 10a:	65 2e       	mov	r6, r21
 10c:	71 2c       	mov	r7, r1
 10e:	6c 0e       	add	r6, r28
 110:	7d 1e       	adc	r7, r29
			{
				PORTA=2;
 112:	42 e0       	ldi	r20, 0x02	; 2
 114:	94 2e       	mov	r9, r20
				_delay_ms(100);
				PORTD=4;
 116:	04 e0       	ldi	r16, 0x04	; 4
				PORTD=2;
				PORTC=a[i];
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
 118:	9d e0       	ldi	r25, 0x0D	; 13
 11a:	49 2e       	mov	r4, r25
 11c:	51 2c       	mov	r5, r1
 11e:	4c 0e       	add	r4, r28
 120:	5d 1e       	adc	r5, r29
	{
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
			{
				PORTA=1;
 122:	88 24       	eor	r8, r8
 124:	83 94       	inc	r8
 126:	15 c0       	rjmp	.+42     	; 0x152 <main+0xc0>
 128:	8b ba       	out	0x1b, r8	; 27
 12a:	c5 01       	movw	r24, r10
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x9a>
				_delay_ms(100);
				PORTD=4;
 130:	32 ba       	out	0x12, r3	; 18
				PORTC=a[j];
 132:	8c 91       	ld	r24, X
 134:	85 bb       	out	0x15, r24	; 21
 136:	c6 01       	movw	r24, r12
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa6>
				_delay_ms(1);
				PORTD=2;
 13c:	22 ba       	out	0x12, r2	; 18
				PORTC=a[i];
 13e:	e5 bb       	out	0x15, r30	; 21
 140:	c7 01       	movw	r24, r14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xb0>
 146:	12 96       	adiw	r26, 0x02	; 2
	
	while(1)
	{
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
 148:	a6 15       	cp	r26, r6
 14a:	b7 05       	cpc	r27, r7
 14c:	69 f7       	brne	.-38     	; 0x128 <main+0x96>
	DDRC=0XFF;
	DDRD=0XFF;
	
	while(1)
	{
		for(i=0;i<6;i++)
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	26 30       	cpi	r18, 0x06	; 6
 154:	31 05       	cpc	r19, r1
 156:	14 f0       	brlt	.+4      	; 0x15c <main+0xca>
 158:	ab 01       	movw	r20, r22
 15a:	22 c0       	rjmp	.+68     	; 0x1a0 <main+0x10e>
				_delay_ms(100);
				PORTD=4;
				PORTC=a[j];
				_delay_ms(1);
				PORTD=2;
				PORTC=a[i];
 15c:	f9 01       	movw	r30, r18
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e6 0f       	add	r30, r22
 164:	f7 1f       	adc	r31, r23
 166:	e0 81       	ld	r30, Z
 168:	db 01       	movw	r26, r22
 16a:	de cf       	rjmp	.-68     	; 0x128 <main+0x96>
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
			{
				PORTA=2;
 16c:	9b ba       	out	0x1b, r9	; 27
 16e:	c5 01       	movw	r24, r10
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xde>
				_delay_ms(100);
				PORTD=4;
 174:	02 bb       	out	0x12, r16	; 18
				PORTC=a[j];
 176:	d9 01       	movw	r26, r18
 178:	8c 91       	ld	r24, X
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	c6 01       	movw	r24, r12
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xec>
				_delay_ms(1);
				PORTD=2;
 182:	92 ba       	out	0x12, r9	; 18
				PORTC=a[i];
 184:	e5 bb       	out	0x15, r30	; 21
 186:	c7 01       	movw	r24, r14
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xf6>
 18c:	2e 5f       	subi	r18, 0xFE	; 254
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
 190:	26 15       	cp	r18, r6
 192:	37 05       	cpc	r19, r7
 194:	59 f7       	brne	.-42     	; 0x16c <main+0xda>
 196:	4e 5f       	subi	r20, 0xFE	; 254
 198:	5f 4f       	sbci	r21, 0xFF	; 255
				PORTD=2;
				PORTC=a[i];
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
 19a:	44 15       	cp	r20, r4
 19c:	55 05       	cpc	r21, r5
 19e:	f1 f0       	breq	.+60     	; 0x1dc <main+0x14a>
				_delay_ms(100);
				PORTD=4;
				PORTC=a[j];
				_delay_ms(1);
				PORTD=2;
				PORTC=a[i];
 1a0:	da 01       	movw	r26, r20
 1a2:	ec 91       	ld	r30, X
 1a4:	9b 01       	movw	r18, r22
 1a6:	e2 cf       	rjmp	.-60     	; 0x16c <main+0xda>
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
			{
				PORTA=4;
 1a8:	0b bb       	out	0x1b, r16	; 27
 1aa:	c5 01       	movw	r24, r10
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x11a>
				_delay_ms(100);
				PORTD=4;
 1b0:	02 bb       	out	0x12, r16	; 18
				PORTC=a[j];
 1b2:	80 81       	ld	r24, Z
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	c6 01       	movw	r24, r12
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x126>
				_delay_ms(1);
				PORTD=2;
 1bc:	92 ba       	out	0x12, r9	; 18
				PORTC=a[i];
 1be:	15 bb       	out	0x15, r17	; 21
 1c0:	c7 01       	movw	r24, r14
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x130>
 1c6:	32 96       	adiw	r30, 0x02	; 2
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
		{
			for(j=0;j<10;j++)
 1c8:	e2 17       	cp	r30, r18
 1ca:	f3 07       	cpc	r31, r19
 1cc:	69 f7       	brne	.-38     	; 0x1a8 <main+0x116>
 1ce:	12 96       	adiw	r26, 0x02	; 2
				PORTD=2;
				PORTC=a[i];
				_delay_ms(10);
			}
		}
		for(i=0;i<6;i++)
 1d0:	a4 17       	cp	r26, r20
 1d2:	b5 07       	cpc	r27, r21
 1d4:	21 f4       	brne	.+8      	; 0x1de <main+0x14c>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	bb cf       	rjmp	.-138    	; 0x152 <main+0xc0>
 1dc:	db 01       	movw	r26, r22
				_delay_ms(100);
				PORTD=4;
				PORTC=a[j];
				_delay_ms(1);
				PORTD=2;
				PORTC=a[i];
 1de:	1c 91       	ld	r17, X
 1e0:	fb 01       	movw	r30, r22
 1e2:	e2 cf       	rjmp	.-60     	; 0x1a8 <main+0x116>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
