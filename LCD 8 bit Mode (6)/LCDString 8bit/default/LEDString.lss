
LEDString.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e2  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000180  00000000  00000000  00000647  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000298  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000103  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b6  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  8a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_initialize>:
			

}

void lcd_initialize()
{
  92:	98 e0       	ldi	r25, 0x08	; 8
  94:	95 bb       	out	0x15, r25	; 21
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
	PORTD=cmd;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	28 ea       	ldi	r18, 0xA8	; 168
  9c:	31 e6       	ldi	r19, 0x61	; 97
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_initialize+0xe>
	_delay_ms(100);
	PORTC=0;
  a4:	15 ba       	out	0x15, r1	; 21
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
  a6:	95 bb       	out	0x15, r25	; 21
	PORTD=cmd;
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_initialize+0x1c>
	_delay_ms(100);
	PORTC=0;
  b2:	15 ba       	out	0x15, r1	; 21
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
  b4:	95 bb       	out	0x15, r25	; 21
	PORTD=cmd;
  b6:	8c e0       	ldi	r24, 0x0C	; 12
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_initialize+0x2a>
	_delay_ms(100);
	PORTC=0;
  c0:	15 ba       	out	0x15, r1	; 21
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
  c2:	95 bb       	out	0x15, r25	; 21
	PORTD=cmd;
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_initialize+0x38>
	_delay_ms(100);
	PORTC=0;
  ce:	15 ba       	out	0x15, r1	; 21
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
  d0:	95 bb       	out	0x15, r25	; 21
	PORTD=cmd;
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	c9 01       	movw	r24, r18
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_initialize+0x46>
	_delay_ms(100);
	PORTC=0;
  dc:	15 ba       	out	0x15, r1	; 21
	lcd_cmd(0x02);
	lcd_cmd(0x04);
	lcd_cmd(0x0c);
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
void lcd_cmd(char cmd)
{
  e0:	98 e0       	ldi	r25, 0x08	; 8
  e2:	95 bb       	out	0x15, r25	; 21
	PORTC=8;
	PORTD=cmd;
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	88 ea       	ldi	r24, 0xA8	; 168
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_cmd+0xa>
	_delay_ms(100);
	PORTC=0;
  ee:	15 ba       	out	0x15, r1	; 21
}
  f0:	08 95       	ret

000000f2 <lcd_data>:

void lcd_data(char data)
{
  f2:	9a e0       	ldi	r25, 0x0A	; 10
  f4:	95 bb       	out	0x15, r25	; 21
	PORTC=10;
	PORTD=data;
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	84 ec       	ldi	r24, 0xC4	; 196
  fa:	99 e0       	ldi	r25, 0x09	; 9
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0xa>
	_delay_ms(10);
	PORTC=2;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	85 bb       	out	0x15, r24	; 21
}
 104:	08 95       	ret

00000106 <lcd_ser>:
#include<avr/io.h>
#include<util/delay.h>


lcd_ser(char *ser)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	ec 01       	movw	r28, r24
	int i=0;
	while(ser[i]!='/0')
	{
		lcd_data(ser[i]);
 10c:	89 91       	ld	r24, Y+
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 114:	fb cf       	rjmp	.-10     	; 0x10c <lcd_ser+0x6>

00000116 <main>:

void lcd_initialize();
void lcd_cmd(char cmd);
void lcd_data(char data);
void main()
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	27 97       	sbiw	r28, 0x07	; 7
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
	
	char ser[7]={"WELCOME"};
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	e0 e6       	ldi	r30, 0x60	; 96
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x1e>
	DDRC=0XFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFF;
 140:	81 bb       	out	0x11, r24	; 17

	lcd_initialize();
 142:	0e 94 49 00 	call	0x92	; 0x92 <lcd_initialize>
	lcd_cmd(0x06);
	lcd_cmd(0x38);
}
void lcd_cmd(char cmd)
{
	PORTC=8;
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	85 bb       	out	0x15, r24	; 21
	PORTD=cmd;
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	88 ea       	ldi	r24, 0xA8	; 168
 150:	91 e6       	ldi	r25, 0x61	; 97
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x3c>
	_delay_ms(100);
	PORTC=0;
 156:	15 ba       	out	0x15, r1	; 21
	DDRD=0XFF;

	lcd_initialize();

			lcd_cmd(0X84);
			lcd_ser(ser[7]);
 158:	88 85       	ldd	r24, Y+8	; 0x08
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 83 00 	call	0x106	; 0x106 <lcd_ser>
			

}
 160:	27 96       	adiw	r28, 0x07	; 7
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
