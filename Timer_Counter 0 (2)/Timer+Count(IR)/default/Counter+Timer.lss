
Counter+Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00000268  000002dc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008e  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000037a  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a0  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000405  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000136  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e6  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	98 bb       	out	0x18, r25	; 24
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  9a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN); 
  9c:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e2       	ldi	r18, 0x20	; 32
  a0:	3e e4       	ldi	r19, 0x4E	; 78
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(10);
	lcd &= ~(1<<EN);
  a8:	c2 98       	cbi	0x18, 2	; 24
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	88 bb       	out	0x18, r24	; 24
	lcd &= ~(1<<RS);
  b0:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  b2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
  bc:	c2 98       	cbi	0x18, 2	; 24
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0c);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	98 bb       	out	0x18, r25	; 24
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  f2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	20 e2       	ldi	r18, 0x20	; 32
  f8:	3e e4       	ldi	r19, 0x4E	; 78
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 100:	c2 98       	cbi	0x18, 2	; 24
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	88 bb       	out	0x18, r24	; 24
	lcd |= (1<<RS);
 108:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
 10a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 114:	c2 98       	cbi	0x18, 2	; 24
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	08 ec       	ldi	r16, 0xC8	; 200
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	15 c0       	rjmp	.+42     	; 0x152 <lcd_num+0x3a>
	int i=0;
	
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_num+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <lcd_num+0x24>
		_delay_ms(100);
		n/=10;
 146:	ce 01       	movw	r24, r28
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 150:	eb 01       	movw	r28, r22

void lcd_num(unsigned int n)
{
	int i=0;
	
	while(n!=0)
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	49 f7       	brne	.-46     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(100);
		n/=10;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <lcd_string>:
	_delay_ms(10);
	lcd &= ~(1<<EN);
}

void lcd_string(char *ser)            
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 168:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 16c:	89 91       	ld	r24, Y+
 16e:	88 23       	and	r24, r24
 170:	d9 f7       	brne	.-10     	; 0x168 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <start_timer>:
#include<avr/interrupt.h>

unsigned int overflow=0;

void start_timer()
{
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	83 bf       	out	0x33, r24	; 51
	TCCR0=(1<<CS01)|(1<<CS00);
	TIMSK=(1<<TOIE0);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	89 bf       	out	0x39, r24	; 57
	TCNT0=0;
 180:	12 be       	out	0x32, r1	; 50
}
 182:	08 95       	ret

00000184 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
	overflow++;
 192:	80 91 60 00 	lds	r24, 0x0060
 196:	90 91 61 00 	lds	r25, 0x0061
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 61 00 	sts	0x0061, r25
 1a0:	80 93 60 00 	sts	0x0060, r24
}
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:

void main()
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	int count=0;
	DDRC=0XFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	84 bb       	out	0x14, r24	; 20
	DDRB=0XFF;
 1be:	87 bb       	out	0x17, r24	; 23
	DDRA=0X00;
 1c0:	1a ba       	out	0x1a, r1	; 26

	sei();
 1c2:	78 94       	sei

unsigned int overflow=0;

void start_timer()
{
	TCCR0=(1<<CS01)|(1<<CS00);
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	89 bf       	out	0x39, r24	; 57
	TCNT0=0;
 1cc:	12 be       	out	0x32, r1	; 50
	DDRB=0XFF;
	DDRA=0X00;

	sei();
	start_timer();
	lcd_initialize();
 1ce:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
 1d2:	00 e2       	ldi	r16, 0x20	; 32
 1d4:	1e e4       	ldi	r17, 0x4E	; 78
 1d6:	c8 01       	movw	r24, r16
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x26>
	_delay_ms(10);
	lcd_cmd(0xc0);
 1dc:	80 ec       	ldi	r24, 0xC0	; 192
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_data('o');
 1e2:	8f e6       	ldi	r24, 0x6F	; 111
 1e4:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 1e8:	c8 01       	movw	r24, r16
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x38>
			lcd_num(count);
		}
		if(overflow>=1471)
		{	
			
			PORTC=0XF0;
 1ee:	00 ef       	ldi	r16, 0xF0	; 240
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_cmd(0xc0);
	lcd_data('o');
	_delay_ms(10);
	while(1)
	{
		if(PINA==0X01)
 1f4:	89 b3       	in	r24, 0x19	; 25
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	51 f4       	brne	.+20     	; 0x20e <main+0x5c>
	{	count++;
 1fa:	21 96       	adiw	r28, 0x01	; 1
		lcd_cmd(0x85);
 1fc:	85 e8       	ldi	r24, 0x85	; 133
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_cmd(0x04);
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_num(count);
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>
		}
		if(overflow>=1471)
 20e:	80 91 60 00 	lds	r24, 0x0060
 212:	90 91 61 00 	lds	r25, 0x0061
 216:	8f 5b       	subi	r24, 0xBF	; 191
 218:	95 40       	sbci	r25, 0x05	; 5
 21a:	60 f3       	brcs	.-40     	; 0x1f4 <main+0x42>
		{	
			
			PORTC=0XF0;
 21c:	05 bb       	out	0x15, r16	; 21
			count=0;
			lcd_cmd(0x85);
 21e:	85 e8       	ldi	r24, 0x85	; 133
 220:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_cmd(0x04);
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
			lcd_num(count);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>
			
			overflow=0;
 232:	10 92 61 00 	sts	0x0061, r1
 236:	10 92 60 00 	sts	0x0060, r1
 23a:	da cf       	rjmp	.-76     	; 0x1f0 <main+0x3e>

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
