
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000009f  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007b8  00000000  00000000  00000431  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b7  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005e6  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012b  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000231  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	92 bb       	out	0x12, r25	; 18
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  9a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN); 
  9c:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(10);
	lcd &= ~(1<<EN);
  a8:	92 98       	cbi	0x12, 2	; 18
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	82 bb       	out	0x12, r24	; 18
	lcd &= ~(1<<RS);
  b0:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  b2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  b4:	92 9a       	sbi	0x12, 2	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
  bc:	92 98       	cbi	0x12, 2	; 18
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0c);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	92 bb       	out	0x12, r25	; 18
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  f2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  f4:	92 9a       	sbi	0x12, 2	; 18
  f6:	24 ec       	ldi	r18, 0xC4	; 196
  f8:	39 e0       	ldi	r19, 0x09	; 9
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 100:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	82 bb       	out	0x12, r24	; 18
	lcd |= (1<<RS);
 108:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
 10a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
 10c:	92 9a       	sbi	0x12, 2	; 18
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 114:	92 98       	cbi	0x12, 2	; 18
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	08 ea       	ldi	r16, 0xA8	; 168
 124:	11 e6       	ldi	r17, 0x61	; 97
 126:	11 c0       	rjmp	.+34     	; 0x14a <lcd_num+0x32>
	int i=0;
	
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	c8 01       	movw	r24, r16
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_num+0x22>
		_delay_ms(100);
		n/=10;
 13e:	ce 01       	movw	r24, r28
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodhi4>
 148:	eb 01       	movw	r28, r22

void lcd_num(unsigned int n)
{
	int i=0;
	
	while(n!=0)
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	69 f7       	brne	.-38     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(100);
		n/=10;
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <lcd_string>:
	_delay_ms(10);
	lcd &= ~(1<<EN);
}

void lcd_string(char *ser)            
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 160:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 164:	89 91       	ld	r24, Y+
 166:	88 23       	and	r24, r24
 168:	d9 f7       	brne	.-10     	; 0x160 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <i2c_ini>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/lcd.h>

void i2c_ini()
{
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	80 b9       	out	0x00, r24	; 0
	TWBR=32;
	TWSR=0;
 174:	11 b8       	out	0x01, r1	; 1
}
 176:	08 95       	ret

00000178 <i2c_start>:

void i2c_start()
{
 178:	84 ea       	ldi	r24, 0xA4	; 164
 17a:	86 bf       	out	0x36, r24	; 54
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR  & (1<<TWINT)));
 17c:	06 b6       	in	r0, 0x36	; 54
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <i2c_start+0x4>
	while((TWSR & (0XF8))!=0X08);
 182:	81 b1       	in	r24, 0x01	; 1
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	e1 f7       	brne	.-8      	; 0x182 <i2c_start+0xa>
}
 18a:	08 95       	ret

0000018c <i2c_stop>:

void i2c_stop()
{
 18c:	84 e9       	ldi	r24, 0x94	; 148
 18e:	86 bf       	out	0x36, r24	; 54
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}
 190:	08 95       	ret

00000192 <i2c_tx>:

void i2c_tx(char data)
{
 192:	83 b9       	out	0x03, r24	; 3
	TWDR=data;
	TWCR=(1<<TWINT)|(1<<TWEN);
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 198:	06 b6       	in	r0, 0x36	; 54
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <i2c_tx+0x6>
}
 19e:	08 95       	ret

000001a0 <i2c_rx>:

char i2c_rx()
{
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	86 bf       	out	0x36, r24	; 54
	TWCR=(1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
 1a4:	06 b6       	in	r0, 0x36	; 54
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <i2c_rx+0x4>
	return TWDR;
 1aa:	83 b1       	in	r24, 0x03	; 3
}
 1ac:	08 95       	ret

000001ae <main>:

void main()
{
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	DDRA=0XFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8a bb       	out	0x1a, r24	; 26
	DDRD=0XFF;
 1c2:	81 bb       	out	0x11, r24	; 17
	lcd_initialize();
 1c4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
 1c8:	24 ef       	ldi	r18, 0xF4	; 244
 1ca:	31 e0       	ldi	r19, 0x01	; 1
 1cc:	c9 01       	movw	r24, r18
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x20>
#include<util/delay.h>
#include<avr/lcd.h>

void i2c_ini()
{
	TWBR=32;
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	80 b9       	out	0x00, r24	; 0
	TWSR=0;
 1d6:	11 b8       	out	0x01, r1	; 1
 1d8:	c9 01       	movw	r24, r18
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x2c>
}

void i2c_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1de:	84 ea       	ldi	r24, 0xA4	; 164
 1e0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR  & (1<<TWINT)));
 1e2:	06 b6       	in	r0, 0x36	; 54
 1e4:	07 fe       	sbrs	r0, 7
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <main+0x34>
	while((TWSR & (0XF8))!=0X08);
 1e8:	81 b1       	in	r24, 0x01	; 1
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x3a>
 1f0:	84 ef       	ldi	r24, 0xF4	; 244
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x46>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 1fc:	84 e8       	ldi	r24, 0x84	; 132
 1fe:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 200:	06 b6       	in	r0, 0x36	; 54
 202:	07 fe       	sbrs	r0, 7
 204:	fd cf       	rjmp	.-6      	; 0x200 <main+0x52>
 206:	84 ef       	ldi	r24, 0xF4	; 244
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x5c>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 20e:	13 b8       	out	0x03, r1	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 214:	06 b6       	in	r0, 0x36	; 54
 216:	07 fe       	sbrs	r0, 7
 218:	fd cf       	rjmp	.-6      	; 0x214 <main+0x66>
 21a:	84 ef       	ldi	r24, 0xF4	; 244
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x70>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 222:	87 e1       	ldi	r24, 0x17	; 23
 224:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 22a:	06 b6       	in	r0, 0x36	; 54
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <main+0x7c>
 230:	24 ef       	ldi	r18, 0xF4	; 244
 232:	31 e0       	ldi	r19, 0x01	; 1
 234:	c9 01       	movw	r24, r18
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x88>
	while((TWSR & (0XF8))!=0X08);
}

void i2c_stop()
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 23a:	84 e9       	ldi	r24, 0x94	; 148
 23c:	86 bf       	out	0x36, r24	; 54
 23e:	c9 01       	movw	r24, r18
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x92>
	TWSR=0;
}

void i2c_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 244:	34 ea       	ldi	r19, 0xA4	; 164
 246:	e3 2e       	mov	r14, r19
 248:	c4 ef       	ldi	r28, 0xF4	; 244
 24a:	d1 e0       	ldi	r29, 0x01	; 1
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 24c:	20 ed       	ldi	r18, 0xD0	; 208
 24e:	c2 2e       	mov	r12, r18
	TWCR=(1<<TWINT)|(1<<TWEN);
 250:	04 e8       	ldi	r16, 0x84	; 132
	while((TWSR & (0XF8))!=0X08);
}

void i2c_stop()
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 252:	94 e9       	ldi	r25, 0x94	; 148
 254:	f9 2e       	mov	r15, r25
}

void i2c_tx(char data)
{
	TWDR=data;
 256:	81 ed       	ldi	r24, 0xD1	; 209
 258:	d8 2e       	mov	r13, r24
	TWSR=0;
}

void i2c_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 25a:	e6 be       	out	0x36, r14	; 54
	while(!(TWCR  & (1<<TWINT)));
 25c:	06 b6       	in	r0, 0x36	; 54
 25e:	07 fe       	sbrs	r0, 7
 260:	fd cf       	rjmp	.-6      	; 0x25c <main+0xae>
	while((TWSR & (0XF8))!=0X08);
 262:	81 b1       	in	r24, 0x01	; 1
 264:	88 7f       	andi	r24, 0xF8	; 248
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0xb4>
 26a:	ce 01       	movw	r24, r28
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0xbe>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 270:	c3 b8       	out	0x03, r12	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 272:	06 bf       	out	0x36, r16	; 54
	while(!(TWCR & (1<<TWINT)));
 274:	06 b6       	in	r0, 0x36	; 54
 276:	07 fe       	sbrs	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <main+0xc6>
 27a:	ce 01       	movw	r24, r28
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0xce>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 280:	13 b8       	out	0x03, r1	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 282:	06 bf       	out	0x36, r16	; 54
	while(!(TWCR & (1<<TWINT)));
 284:	06 b6       	in	r0, 0x36	; 54
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <main+0xd6>
 28a:	ce 01       	movw	r24, r28
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0xde>
	while((TWSR & (0XF8))!=0X08);
}

void i2c_stop()
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 290:	f6 be       	out	0x36, r15	; 54
 292:	ce 01       	movw	r24, r28
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0xe6>
	TWSR=0;
}

void i2c_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 298:	e6 be       	out	0x36, r14	; 54
	while(!(TWCR  & (1<<TWINT)));
 29a:	06 b6       	in	r0, 0x36	; 54
 29c:	07 fe       	sbrs	r0, 7
 29e:	fd cf       	rjmp	.-6      	; 0x29a <main+0xec>
	while((TWSR & (0XF8))!=0X08);
 2a0:	81 b1       	in	r24, 0x01	; 1
 2a2:	88 7f       	andi	r24, 0xF8	; 248
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0xf2>
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0xfc>
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

void i2c_tx(char data)
{
	TWDR=data;
 2ae:	d3 b8       	out	0x03, r13	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 2b0:	06 bf       	out	0x36, r16	; 54
	while(!(TWCR & (1<<TWINT)));
 2b2:	06 b6       	in	r0, 0x36	; 54
 2b4:	07 fe       	sbrs	r0, 7
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <main+0x104>
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x10c>
}

char i2c_rx()
{
	TWCR=(1<<TWINT)|(1<<TWEN);
 2be:	06 bf       	out	0x36, r16	; 54
	while(!(TWCR & (1<<TWINT)));
 2c0:	06 b6       	in	r0, 0x36	; 54
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <main+0x112>
	return TWDR;
 2c6:	13 b1       	in	r17, 0x03	; 3
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x11c>

	char a=i2c_rx();	// receive and store 
	_delay_ms(2);

//	PORTA=a;			// show at PORTA
	lcd_cmd(0x86);
 2ce:	86 e8       	ldi	r24, 0x86	; 134
 2d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x04);
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_num(a);
 2da:	81 2f       	mov	r24, r17
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x136>
	while((TWSR & (0XF8))!=0X08);
}

void i2c_stop()
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 2e8:	f6 be       	out	0x36, r15	; 54
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x13e>
 2f0:	b4 cf       	rjmp	.-152    	; 0x25a <main+0xac>

000002f2 <__udivmodhi4>:
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	51 e1       	ldi	r21, 0x11	; 17
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <__udivmodhi4_ep>

000002fa <__udivmodhi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	a6 17       	cp	r26, r22
 300:	b7 07       	cpc	r27, r23
 302:	10 f0       	brcs	.+4      	; 0x308 <__udivmodhi4_ep>
 304:	a6 1b       	sub	r26, r22
 306:	b7 0b       	sbc	r27, r23

00000308 <__udivmodhi4_ep>:
 308:	88 1f       	adc	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	5a 95       	dec	r21
 30e:	a9 f7       	brne	.-22     	; 0x2fa <__udivmodhi4_loop>
 310:	80 95       	com	r24
 312:	90 95       	com	r25
 314:	bc 01       	movw	r22, r24
 316:	cd 01       	movw	r24, r26
 318:	08 95       	ret

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
