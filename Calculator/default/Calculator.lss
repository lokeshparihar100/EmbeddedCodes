
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000004ee  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006d  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000686  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b9  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005f8  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000117  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000276  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 01 	call	0x304	; 0x304 <main>
  8a:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x28);
	lcd_cmd(0x01);
}

void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	94 60       	ori	r25, 0x04	; 4
  98:	9b bb       	out	0x1b, r25	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	24 ec       	ldi	r18, 0xC4	; 196
  9c:	39 e0       	ldi	r19, 0x09	; 9
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0xe>
	PORTA=(cmd&0xf0)|0x04;
	_delay_ms(10);
	PORTA=PORTA-0X04;
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	94 50       	subi	r25, 0x04	; 4
  a8:	9b bb       	out	0x1b, r25	; 27

	PORTA=((cmd<<4)&0xf0)|0x04;
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_cmd+0x22>
	_delay_ms(10);
	PORTA=PORTA-0X04;
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	84 50       	subi	r24, 0x04	; 4
  bc:	8b bb       	out	0x1b, r24	; 27
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
#include<avr/io.h>
#include<util/delay.h>


void lcd_initialize()
{
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x02);
	lcd_cmd(0x0c);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x04);
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
}
  e8:	08 95       	ret

000000ea <lcd_data>:
	_delay_ms(10);
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	95 60       	ori	r25, 0x05	; 5
  f0:	9b bb       	out	0x1b, r25	; 27
  f2:	24 ec       	ldi	r18, 0xC4	; 196
  f4:	39 e0       	ldi	r19, 0x09	; 9
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0xe>
	PORTA=(data&0xf0)|0x05;
	_delay_ms(10);
	PORTA=PORTA-0X04;
  fc:	9b b3       	in	r25, 0x1b	; 27
  fe:	94 50       	subi	r25, 0x04	; 4
 100:	9b bb       	out	0x1b, r25	; 27

	PORTA=((data<<4)&0xf0)|0x05;
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	85 60       	ori	r24, 0x05	; 5
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x22>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	84 50       	subi	r24, 0x04	; 4
 114:	8b bb       	out	0x1b, r24	; 27
}
 116:	08 95       	ret

00000118 <lcd_num>:
void lcd_num(int x)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	9c 01       	movw	r18, r24
	int a=0;
	if(x==0)
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	99 f4       	brne	.+38     	; 0x148 <lcd_num+0x30>
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
	PORTA=(data&0xf0)|0x05;
 122:	85 e3       	ldi	r24, 0x35	; 53
 124:	8b bb       	out	0x1b, r24	; 27
 126:	24 ec       	ldi	r18, 0xC4	; 196
 128:	39 e0       	ldi	r19, 0x09	; 9
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_num+0x14>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	84 50       	subi	r24, 0x04	; 4
 134:	8b bb       	out	0x1b, r24	; 27

	PORTA=((data<<4)&0xf0)|0x05;
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	c9 01       	movw	r24, r18
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_num+0x24>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	84 50       	subi	r24, 0x04	; 4
 144:	8b bb       	out	0x1b, r24	; 27
 146:	25 c0       	rjmp	.+74     	; 0x192 <lcd_num+0x7a>
 148:	c4 ec       	ldi	r28, 0xC4	; 196
 14a:	d9 e0       	ldi	r29, 0x09	; 9
	if(x==0)
	lcd_data(48);
	else
	while(x!=0)
	{	a=x%10;
		lcd_data(48+a);
 14c:	c9 01       	movw	r24, r18
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 4e 02 	call	0x49c	; 0x49c <__divmodhi4>
 156:	80 5d       	subi	r24, 0xD0	; 208
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
	PORTA=(data&0xf0)|0x05;
 158:	98 2f       	mov	r25, r24
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	95 60       	ori	r25, 0x05	; 5
 15e:	9b bb       	out	0x1b, r25	; 27
 160:	fe 01       	movw	r30, r28
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_num+0x4a>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	94 50       	subi	r25, 0x04	; 4
 16a:	9b bb       	out	0x1b, r25	; 27

	PORTA=((data<<4)&0xf0)|0x05;
 16c:	82 95       	swap	r24
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	85 60       	ori	r24, 0x05	; 5
 172:	8b bb       	out	0x1b, r24	; 27
 174:	ce 01       	movw	r24, r28
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_num+0x5e>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	84 50       	subi	r24, 0x04	; 4
 17e:	8b bb       	out	0x1b, r24	; 27
	lcd_data(48);
	else
	while(x!=0)
	{	a=x%10;
		lcd_data(48+a);
		x/=10;
 180:	c9 01       	movw	r24, r18
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 4e 02 	call	0x49c	; 0x49c <__divmodhi4>
 18a:	9b 01       	movw	r18, r22
{
	int a=0;
	if(x==0)
	lcd_data(48);
	else
	while(x!=0)
 18c:	61 15       	cp	r22, r1
 18e:	71 05       	cpc	r23, r1
 190:	e9 f6       	brne	.-70     	; 0x14c <lcd_num+0x34>
	{	a=x%10;
		lcd_data(48+a);
		x/=10;
	}
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_string>:
void lcd_string(char *ser)             
{
 198:	fc 01       	movw	r30, r24
 19a:	44 ec       	ldi	r20, 0xC4	; 196
 19c:	59 e0       	ldi	r21, 0x09	; 9
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <lcd_string+0x30>
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
	PORTA=(data&0xf0)|0x05;
 1a0:	82 2f       	mov	r24, r18
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	85 60       	ori	r24, 0x05	; 5
 1a6:	8b bb       	out	0x1b, r24	; 27
 1a8:	ca 01       	movw	r24, r20
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_string+0x12>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	84 50       	subi	r24, 0x04	; 4
 1b2:	8b bb       	out	0x1b, r24	; 27

	PORTA=((data<<4)&0xf0)|0x05;
 1b4:	22 95       	swap	r18
 1b6:	20 7f       	andi	r18, 0xF0	; 240
 1b8:	25 60       	ori	r18, 0x05	; 5
 1ba:	2b bb       	out	0x1b, r18	; 27
 1bc:	ca 01       	movw	r24, r20
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_string+0x26>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	84 50       	subi	r24, 0x04	; 4
 1c6:	8b bb       	out	0x1b, r24	; 27
	}
}
void lcd_string(char *ser)             
{
	int i=0;
	while(ser[i]!='\0')
 1c8:	21 91       	ld	r18, Z+
 1ca:	22 23       	and	r18, r18
 1cc:	49 f7       	brne	.-46     	; 0x1a0 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}
}
 1ce:	08 95       	ret

000001d0 <keypad>:

int keypad()
{ 	
 1d0:	4e ef       	ldi	r20, 0xFE	; 254
		while(PINC==0B01111110);
		return '/';
	}


PORTC=0B11111101;
 1d2:	3d ef       	ldi	r19, 0xFD	; 253
		while(PINC==0B01111101);
		return 'x';
	}


PORTC=0B11111011;
 1d4:	2b ef       	ldi	r18, 0xFB	; 251
	}
	



PORTC=0B11110111;
 1d6:	97 ef       	ldi	r25, 0xF7	; 247

int keypad()
{ 	
while(1)
{
PORTC=0B11111110;
 1d8:	45 bb       	out	0x15, r20	; 21
	
	if(PINC==0B11101110)
 1da:	83 b3       	in	r24, 0x13	; 19
 1dc:	8e 3e       	cpi	r24, 0xEE	; 238
 1de:	31 f4       	brne	.+12     	; 0x1ec <keypad+0x1c>
	{
		while(PINC==0B11101110);
 1e0:	83 b3       	in	r24, 0x13	; 19
 1e2:	8e 3e       	cpi	r24, 0xEE	; 238
 1e4:	e9 f3       	breq	.-6      	; 0x1e0 <keypad+0x10>
 1e6:	27 e0       	ldi	r18, 0x07	; 7
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	8a c0       	rjmp	.+276    	; 0x300 <keypad+0x130>
		return 7;
	}
	else if(PINC==0B11011110)
 1ec:	83 b3       	in	r24, 0x13	; 19
 1ee:	8e 3d       	cpi	r24, 0xDE	; 222
 1f0:	31 f4       	brne	.+12     	; 0x1fe <keypad+0x2e>
	{
		while(PINC==0B11011110);
 1f2:	83 b3       	in	r24, 0x13	; 19
 1f4:	8e 3d       	cpi	r24, 0xDE	; 222
 1f6:	e9 f3       	breq	.-6      	; 0x1f2 <keypad+0x22>
 1f8:	28 e0       	ldi	r18, 0x08	; 8
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 c0       	rjmp	.+258    	; 0x300 <keypad+0x130>
		return 8;
	}
	else if(PINC==0B10111110)
 1fe:	83 b3       	in	r24, 0x13	; 19
 200:	8e 3b       	cpi	r24, 0xBE	; 190
 202:	31 f4       	brne	.+12     	; 0x210 <keypad+0x40>
	{
		while(PINC==0B10111110);
 204:	83 b3       	in	r24, 0x13	; 19
 206:	8e 3b       	cpi	r24, 0xBE	; 190
 208:	e9 f3       	breq	.-6      	; 0x204 <keypad+0x34>
 20a:	29 e0       	ldi	r18, 0x09	; 9
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	78 c0       	rjmp	.+240    	; 0x300 <keypad+0x130>
		return 9;
	}
	else if(PINC==0B01111110)
 210:	83 b3       	in	r24, 0x13	; 19
 212:	8e 37       	cpi	r24, 0x7E	; 126
 214:	31 f4       	brne	.+12     	; 0x222 <keypad+0x52>
	{
		while(PINC==0B01111110);
 216:	83 b3       	in	r24, 0x13	; 19
 218:	8e 37       	cpi	r24, 0x7E	; 126
 21a:	e9 f3       	breq	.-6      	; 0x216 <keypad+0x46>
 21c:	2f e2       	ldi	r18, 0x2F	; 47
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	6f c0       	rjmp	.+222    	; 0x300 <keypad+0x130>
		return '/';
	}


PORTC=0B11111101;
 222:	35 bb       	out	0x15, r19	; 21
	
	if(PINC==0B11101101)
 224:	83 b3       	in	r24, 0x13	; 19
 226:	8d 3e       	cpi	r24, 0xED	; 237
 228:	31 f4       	brne	.+12     	; 0x236 <keypad+0x66>
	{
		while(PINC==0B11101101);
 22a:	83 b3       	in	r24, 0x13	; 19
 22c:	8d 3e       	cpi	r24, 0xED	; 237
 22e:	e9 f3       	breq	.-6      	; 0x22a <keypad+0x5a>
 230:	24 e0       	ldi	r18, 0x04	; 4
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	65 c0       	rjmp	.+202    	; 0x300 <keypad+0x130>
		return 4;
	}
	else if(PINC==0B11011101)
 236:	83 b3       	in	r24, 0x13	; 19
 238:	8d 3d       	cpi	r24, 0xDD	; 221
 23a:	31 f4       	brne	.+12     	; 0x248 <keypad+0x78>
	{
		while(PINC==0B11011101);
 23c:	83 b3       	in	r24, 0x13	; 19
 23e:	8d 3d       	cpi	r24, 0xDD	; 221
 240:	e9 f3       	breq	.-6      	; 0x23c <keypad+0x6c>
 242:	25 e0       	ldi	r18, 0x05	; 5
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	5c c0       	rjmp	.+184    	; 0x300 <keypad+0x130>
		return 5;
	}
	else if(PINC==0B10111101)
 248:	83 b3       	in	r24, 0x13	; 19
 24a:	8d 3b       	cpi	r24, 0xBD	; 189
 24c:	31 f4       	brne	.+12     	; 0x25a <keypad+0x8a>
	{
		while(PINC==0B10111101);
 24e:	83 b3       	in	r24, 0x13	; 19
 250:	8d 3b       	cpi	r24, 0xBD	; 189
 252:	e9 f3       	breq	.-6      	; 0x24e <keypad+0x7e>
 254:	26 e0       	ldi	r18, 0x06	; 6
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	53 c0       	rjmp	.+166    	; 0x300 <keypad+0x130>
		return 6;
	}
	else if(PINC==0B01111101)
 25a:	83 b3       	in	r24, 0x13	; 19
 25c:	8d 37       	cpi	r24, 0x7D	; 125
 25e:	31 f4       	brne	.+12     	; 0x26c <keypad+0x9c>
	{
		while(PINC==0B01111101);
 260:	83 b3       	in	r24, 0x13	; 19
 262:	8d 37       	cpi	r24, 0x7D	; 125
 264:	e9 f3       	breq	.-6      	; 0x260 <keypad+0x90>
 266:	28 e7       	ldi	r18, 0x78	; 120
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	4a c0       	rjmp	.+148    	; 0x300 <keypad+0x130>
		return 'x';
	}


PORTC=0B11111011;
 26c:	25 bb       	out	0x15, r18	; 21
	
	if(PINC==0B11101011)
 26e:	83 b3       	in	r24, 0x13	; 19
 270:	8b 3e       	cpi	r24, 0xEB	; 235
 272:	31 f4       	brne	.+12     	; 0x280 <keypad+0xb0>
	{
		while(PINC==0B11101011);
 274:	83 b3       	in	r24, 0x13	; 19
 276:	8b 3e       	cpi	r24, 0xEB	; 235
 278:	e9 f3       	breq	.-6      	; 0x274 <keypad+0xa4>
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 c0       	rjmp	.+128    	; 0x300 <keypad+0x130>
		return 1;
	}
	else if(PINC==0B11011011)
 280:	83 b3       	in	r24, 0x13	; 19
 282:	8b 3d       	cpi	r24, 0xDB	; 219
 284:	31 f4       	brne	.+12     	; 0x292 <keypad+0xc2>
	{
		while(PINC==0B11011011);
 286:	83 b3       	in	r24, 0x13	; 19
 288:	8b 3d       	cpi	r24, 0xDB	; 219
 28a:	e9 f3       	breq	.-6      	; 0x286 <keypad+0xb6>
 28c:	22 e0       	ldi	r18, 0x02	; 2
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	37 c0       	rjmp	.+110    	; 0x300 <keypad+0x130>
		return 2;
	}
	else if(PINC==0B10111011)
 292:	83 b3       	in	r24, 0x13	; 19
 294:	8b 3b       	cpi	r24, 0xBB	; 187
 296:	31 f4       	brne	.+12     	; 0x2a4 <keypad+0xd4>
	{
		while(PINC==0B10111011);
 298:	83 b3       	in	r24, 0x13	; 19
 29a:	8b 3b       	cpi	r24, 0xBB	; 187
 29c:	e9 f3       	breq	.-6      	; 0x298 <keypad+0xc8>
 29e:	23 e0       	ldi	r18, 0x03	; 3
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	2e c0       	rjmp	.+92     	; 0x300 <keypad+0x130>
		return 3;
	}
	else if(PINC==0B01111011)
 2a4:	83 b3       	in	r24, 0x13	; 19
 2a6:	8b 37       	cpi	r24, 0x7B	; 123
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <keypad+0xe6>
	{
		while(PINC==0B01111011);
 2aa:	83 b3       	in	r24, 0x13	; 19
 2ac:	8b 37       	cpi	r24, 0x7B	; 123
 2ae:	e9 f3       	breq	.-6      	; 0x2aa <keypad+0xda>
 2b0:	2d e2       	ldi	r18, 0x2D	; 45
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	25 c0       	rjmp	.+74     	; 0x300 <keypad+0x130>
	}
	



PORTC=0B11110111;
 2b6:	95 bb       	out	0x15, r25	; 21
	
	if(PINC==0B11100111)
 2b8:	83 b3       	in	r24, 0x13	; 19
 2ba:	87 3e       	cpi	r24, 0xE7	; 231
 2bc:	31 f4       	brne	.+12     	; 0x2ca <keypad+0xfa>
	{
		while(PINC==0B11100111);
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	87 3e       	cpi	r24, 0xE7	; 231
 2c2:	e9 f3       	breq	.-6      	; 0x2be <keypad+0xee>
 2c4:	23 e4       	ldi	r18, 0x43	; 67
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	1b c0       	rjmp	.+54     	; 0x300 <keypad+0x130>
		return 'C';
	}
	else if(PINC==0B11010111)
 2ca:	83 b3       	in	r24, 0x13	; 19
 2cc:	87 3d       	cpi	r24, 0xD7	; 215
 2ce:	31 f4       	brne	.+12     	; 0x2dc <keypad+0x10c>
	{
		while(PINC==0B11010111);
 2d0:	83 b3       	in	r24, 0x13	; 19
 2d2:	87 3d       	cpi	r24, 0xD7	; 215
 2d4:	e9 f3       	breq	.-6      	; 0x2d0 <keypad+0x100>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	12 c0       	rjmp	.+36     	; 0x300 <keypad+0x130>
		return 0;
	}
	else if(PINC==0B10110111)
 2dc:	83 b3       	in	r24, 0x13	; 19
 2de:	87 3b       	cpi	r24, 0xB7	; 183
 2e0:	31 f4       	brne	.+12     	; 0x2ee <keypad+0x11e>
	{
		while(PINC==0B10110111);
 2e2:	83 b3       	in	r24, 0x13	; 19
 2e4:	87 3b       	cpi	r24, 0xB7	; 183
 2e6:	e9 f3       	breq	.-6      	; 0x2e2 <keypad+0x112>
 2e8:	2f e4       	ldi	r18, 0x4F	; 79
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <keypad+0x130>
		return 'O';
	}
	else if(PINC==0B01110111)
 2ee:	83 b3       	in	r24, 0x13	; 19
 2f0:	87 37       	cpi	r24, 0x77	; 119
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <keypad+0x126>
 2f4:	71 cf       	rjmp	.-286    	; 0x1d8 <keypad+0x8>
	{
		while(PINC==0B01110111);
 2f6:	83 b3       	in	r24, 0x13	; 19
 2f8:	87 37       	cpi	r24, 0x77	; 119
 2fa:	e9 f3       	breq	.-6      	; 0x2f6 <keypad+0x126>
 2fc:	21 e4       	ldi	r18, 0x41	; 65
 2fe:	30 e0       	ldi	r19, 0x00	; 0
		return 'A';
	}
}
}
 300:	c9 01       	movw	r24, r18
 302:	08 95       	ret

00000304 <main>:


void main()
{
 304:	4f 92       	push	r4
 306:	5f 92       	push	r5
 308:	6f 92       	push	r6
 30a:	7f 92       	push	r7
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	a0 97       	sbiw	r28, 0x20	; 32
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
	int i,b=0,sum=0;
	int j[16]={0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f};
 334:	de 01       	movw	r26, r28
 336:	11 96       	adiw	r26, 0x01	; 1
 338:	e0 e6       	ldi	r30, 0x60	; 96
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	81 50       	subi	r24, 0x01	; 1
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x3a>
	DDRA=0XFF;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	8a bb       	out	0x1a, r24	; 26
	DDRC=0X0f;
 34a:	8f e0       	ldi	r24, 0x0F	; 15
 34c:	84 bb       	out	0x14, r24	; 20
	
	lcd_initialize();
 34e:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
 352:	6e 01       	movw	r12, r28
 354:	08 94       	sec
 356:	c1 1c       	adc	r12, r1
 358:	d1 1c       	adc	r13, r1
 35a:	ee 24       	eor	r14, r14
 35c:	ff 24       	eor	r15, r15
 35e:	aa 24       	eor	r10, r10
 360:	bb 24       	eor	r11, r11
 362:	74 ec       	ldi	r23, 0xC4	; 196
 364:	87 2e       	mov	r8, r23
 366:	79 e0       	ldi	r23, 0x09	; 9
 368:	97 2e       	mov	r9, r23
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
	PORTA=(data&0xf0)|0x05;
 36a:	65 e2       	ldi	r22, 0x25	; 37
 36c:	46 2e       	mov	r4, r22
	_delay_ms(10);
	PORTA=PORTA-0X04;

	PORTA=((data<<4)&0xf0)|0x05;
 36e:	55 eb       	ldi	r21, 0xB5	; 181
 370:	55 2e       	mov	r5, r21
	int j[16]={0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f};
	DDRA=0XFF;
	DDRC=0X0f;
	
	lcd_initialize();
	for(i=0;i<16;i++)
 372:	41 e2       	ldi	r20, 0x21	; 33
 374:	64 2e       	mov	r6, r20
 376:	71 2c       	mov	r7, r1
 378:	6c 0e       	add	r6, r28
 37a:	7d 1e       	adc	r7, r29
	{
	int	a=keypad();
 37c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keypad>
 380:	8c 01       	movw	r16, r24
	
	lcd_cmd(j[i]);
 382:	f6 01       	movw	r30, r12
 384:	90 81       	ld	r25, Z
	lcd_cmd(0x01);
}

void lcd_cmd(char cmd)
{
	PORTA=(cmd&0xf0)|0x04;
 386:	89 2f       	mov	r24, r25
 388:	80 7f       	andi	r24, 0xF0	; 240
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	8b bb       	out	0x1b, r24	; 27
 38e:	24 ec       	ldi	r18, 0xC4	; 196
 390:	39 e0       	ldi	r19, 0x09	; 9
 392:	f4 01       	movw	r30, r8
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x90>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 398:	8b b3       	in	r24, 0x1b	; 27
 39a:	84 50       	subi	r24, 0x04	; 4
 39c:	8b bb       	out	0x1b, r24	; 27

	PORTA=((cmd<<4)&0xf0)|0x04;
 39e:	92 95       	swap	r25
 3a0:	90 7f       	andi	r25, 0xF0	; 240
 3a2:	94 60       	ori	r25, 0x04	; 4
 3a4:	9b bb       	out	0x1b, r25	; 27
 3a6:	c4 01       	movw	r24, r8
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0xa4>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 3ac:	8b b3       	in	r24, 0x1b	; 27
 3ae:	84 50       	subi	r24, 0x04	; 4
 3b0:	8b bb       	out	0x1b, r24	; 27
	{
	int	a=keypad();
	
	lcd_cmd(j[i]);

if(a=='C')
 3b2:	03 34       	cpi	r16, 0x43	; 67
 3b4:	11 05       	cpc	r17, r1
 3b6:	89 f4       	brne	.+34     	; 0x3da <main+0xd6>
	lcd_cmd(0x01);
}

void lcd_cmd(char cmd)
{
	PORTA=(cmd&0xf0)|0x04;
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	8b bb       	out	0x1b, r24	; 27
 3bc:	c9 01       	movw	r24, r18
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0xba>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 3c2:	8b b3       	in	r24, 0x1b	; 27
 3c4:	84 50       	subi	r24, 0x04	; 4
 3c6:	8b bb       	out	0x1b, r24	; 27

	PORTA=((cmd<<4)&0xf0)|0x04;
 3c8:	84 e1       	ldi	r24, 0x14	; 20
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	c9 01       	movw	r24, r18
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0xca>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 3d2:	8b b3       	in	r24, 0x1b	; 27
 3d4:	84 50       	subi	r24, 0x04	; 4
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	4a c0       	rjmp	.+148    	; 0x46e <__stack+0xf>
if(a=='C')
{	lcd_cmd(0x01);
	break;
}

else if(a>=0&&a<=9)
 3da:	0a 30       	cpi	r16, 0x0A	; 10
 3dc:	11 05       	cpc	r17, r1
 3de:	80 f4       	brcc	.+32     	; 0x400 <main+0xfc>
	{ 	lcd_num(a);
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>
	 b=b*10+a;
 3e6:	c7 01       	movw	r24, r14
 3e8:	33 e0       	ldi	r19, 0x03	; 3
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	3a 95       	dec	r19
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0xe6>
 3f2:	ee 0c       	add	r14, r14
 3f4:	ff 1c       	adc	r15, r15
 3f6:	e8 0e       	add	r14, r24
 3f8:	f9 1e       	adc	r15, r25
 3fa:	e0 0e       	add	r14, r16
 3fc:	f1 1e       	adc	r15, r17
 3fe:	2f c0       	rjmp	.+94     	; 0x45e <main+0x15a>
	}
else if(a=='A')
 400:	01 34       	cpi	r16, 0x41	; 65
 402:	11 05       	cpc	r17, r1
 404:	99 f4       	brne	.+38     	; 0x42c <main+0x128>
	PORTA=PORTA-0X04;
}

void lcd_data(char data)
{
	PORTA=(data&0xf0)|0x05;
 406:	4b ba       	out	0x1b, r4	; 27
 408:	c4 01       	movw	r24, r8
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <main+0x106>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 40e:	8b b3       	in	r24, 0x1b	; 27
 410:	84 50       	subi	r24, 0x04	; 4
 412:	8b bb       	out	0x1b, r24	; 27

	PORTA=((data<<4)&0xf0)|0x05;
 414:	5b ba       	out	0x1b, r5	; 27
 416:	c4 01       	movw	r24, r8
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <main+0x114>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 41c:	8b b3       	in	r24, 0x1b	; 27
 41e:	84 50       	subi	r24, 0x04	; 4
 420:	8b bb       	out	0x1b, r24	; 27
	{ 	lcd_num(a);
	 b=b*10+a;
	}
else if(a=='A')
	{	lcd_data(43);
		sum=sum+b;
 422:	ae 0c       	add	r10, r14
 424:	bf 1c       	adc	r11, r15
 426:	ee 24       	eor	r14, r14
 428:	ff 24       	eor	r15, r15
 42a:	19 c0       	rjmp	.+50     	; 0x45e <main+0x15a>
		b=0;
	}
else if(a=='O')
 42c:	0f 34       	cpi	r16, 0x4F	; 79
 42e:	11 05       	cpc	r17, r1
 430:	b1 f4       	brne	.+44     	; 0x45e <main+0x15a>
	lcd_cmd(0x01);
}

void lcd_cmd(char cmd)
{
	PORTA=(cmd&0xf0)|0x04;
 432:	84 ec       	ldi	r24, 0xC4	; 196
 434:	8b bb       	out	0x1b, r24	; 27
 436:	c9 01       	movw	r24, r18
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0x134>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 43c:	8b b3       	in	r24, 0x1b	; 27
 43e:	84 50       	subi	r24, 0x04	; 4
 440:	8b bb       	out	0x1b, r24	; 27

	PORTA=((cmd<<4)&0xf0)|0x04;
 442:	84 e5       	ldi	r24, 0x54	; 84
 444:	8b bb       	out	0x1b, r24	; 27
 446:	c9 01       	movw	r24, r18
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <main+0x144>
	_delay_ms(10);
	PORTA=PORTA-0X04;
 44c:	8b b3       	in	r24, 0x1b	; 27
 44e:	84 50       	subi	r24, 0x04	; 4
 450:	8b bb       	out	0x1b, r24	; 27
	}
else if(a=='O')
	{	
		lcd_cmd(0xc5);
		sum=sum+b;
		lcd_num(sum);
 452:	c5 01       	movw	r24, r10
 454:	8e 0d       	add	r24, r14
 456:	9f 1d       	adc	r25, r15
 458:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>
 45c:	08 c0       	rjmp	.+16     	; 0x46e <__stack+0xf>
		break;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	c8 0e       	add	r12, r24
 464:	d9 1e       	adc	r13, r25
	int j[16]={0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f};
	DDRA=0XFF;
	DDRC=0X0f;
	
	lcd_initialize();
	for(i=0;i<16;i++)
 466:	c6 14       	cp	r12, r6
 468:	d7 04       	cpc	r13, r7
 46a:	09 f0       	breq	.+2      	; 0x46e <__stack+0xf>
 46c:	87 cf       	rjmp	.-242    	; 0x37c <main+0x78>
		sum=sum+b;
		lcd_num(sum);
		break;
	}
	}
}
 46e:	a0 96       	adiw	r28, 0x20	; 32
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	7f 90       	pop	r7
 494:	6f 90       	pop	r6
 496:	5f 90       	pop	r5
 498:	4f 90       	pop	r4
 49a:	08 95       	ret

0000049c <__divmodhi4>:
 49c:	97 fb       	bst	r25, 7
 49e:	09 2e       	mov	r0, r25
 4a0:	07 26       	eor	r0, r23
 4a2:	0a d0       	rcall	.+20     	; 0x4b8 <__divmodhi4_neg1>
 4a4:	77 fd       	sbrc	r23, 7
 4a6:	04 d0       	rcall	.+8      	; 0x4b0 <__divmodhi4_neg2>
 4a8:	0c d0       	rcall	.+24     	; 0x4c2 <__udivmodhi4>
 4aa:	06 d0       	rcall	.+12     	; 0x4b8 <__divmodhi4_neg1>
 4ac:	00 20       	and	r0, r0
 4ae:	1a f4       	brpl	.+6      	; 0x4b6 <__divmodhi4_exit>

000004b0 <__divmodhi4_neg2>:
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255

000004b6 <__divmodhi4_exit>:
 4b6:	08 95       	ret

000004b8 <__divmodhi4_neg1>:
 4b8:	f6 f7       	brtc	.-4      	; 0x4b6 <__divmodhi4_exit>
 4ba:	90 95       	com	r25
 4bc:	81 95       	neg	r24
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__udivmodhi4>:
 4c2:	aa 1b       	sub	r26, r26
 4c4:	bb 1b       	sub	r27, r27
 4c6:	51 e1       	ldi	r21, 0x11	; 17
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__udivmodhi4_ep>

000004ca <__udivmodhi4_loop>:
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	a6 17       	cp	r26, r22
 4d0:	b7 07       	cpc	r27, r23
 4d2:	10 f0       	brcs	.+4      	; 0x4d8 <__udivmodhi4_ep>
 4d4:	a6 1b       	sub	r26, r22
 4d6:	b7 0b       	sbc	r27, r23

000004d8 <__udivmodhi4_ep>:
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	5a 95       	dec	r21
 4de:	a9 f7       	brne	.-22     	; 0x4ca <__udivmodhi4_loop>
 4e0:	80 95       	com	r24
 4e2:	90 95       	com	r25
 4e4:	bc 01       	movw	r22, r24
 4e6:	cd 01       	movw	r24, r26
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
