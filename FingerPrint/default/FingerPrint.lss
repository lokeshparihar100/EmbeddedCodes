
FingerPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000045a  000004ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800068  00000462  000004d6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f6  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092a  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f4  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000855  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000174  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  8a:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	98 bb       	out	0x18, r25	; 24
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  9a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN); 
  9c:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e2       	ldi	r18, 0x20	; 32
  a0:	3e e4       	ldi	r19, 0x4E	; 78
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(10);
	lcd &= ~(1<<EN);
  a8:	c2 98       	cbi	0x18, 2	; 24
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	88 bb       	out	0x18, r24	; 24
	lcd &= ~(1<<RS);
  b0:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  b2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
  bc:	c2 98       	cbi	0x18, 2	; 24
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
#define RW 1
#define EN 2

		
void lcd_initialize()
{	
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
	lcd1=0xFF;
	lcd_cmd(0x02);
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0c);
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  ec:	08 95       	ret

000000ee <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ee:	98 2f       	mov	r25, r24
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	98 bb       	out	0x18, r25	; 24
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f4:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  f6:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  f8:	c2 9a       	sbi	0x18, 2	; 24
  fa:	20 e2       	ldi	r18, 0x20	; 32
  fc:	3e e4       	ldi	r19, 0x4E	; 78
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0x12>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 104:	c2 98       	cbi	0x18, 2	; 24
	
	lcd=(data<<4);
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	88 bb       	out	0x18, r24	; 24
	lcd |= (1<<RS);
 10c:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
 10e:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
 110:	c2 9a       	sbi	0x18, 2	; 24
 112:	c9 01       	movw	r24, r18
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_data+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 118:	c2 98       	cbi	0x18, 2	; 24
}
 11a:	08 95       	ret

0000011c <lcd_num>:

void lcd_num(unsigned int n)
{
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	int i=0;
	
	if(n==0)
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	19 f4       	brne	.+6      	; 0x130 <lcd_num+0x14>
	{
		lcd_data(i+48);
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
	}
	lcd_cmd(0x04);
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 136:	08 ec       	ldi	r16, 0xC8	; 200
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	15 c0       	rjmp	.+42     	; 0x166 <lcd_num+0x4a>

	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 13c:	ce 01       	movw	r24, r28
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
 14c:	88 ee       	ldi	r24, 0xE8	; 232
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	f8 01       	movw	r30, r16
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_num+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <lcd_num+0x34>
		_delay_ms(100);
		n/=10;
 15a:	ce 01       	movw	r24, r28
 15c:	6a e0       	ldi	r22, 0x0A	; 10
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 164:	eb 01       	movw	r28, r22
	{
		lcd_data(i+48);
	}
	lcd_cmd(0x04);

	while(n!=0)
 166:	20 97       	sbiw	r28, 0x00	; 0
 168:	49 f7       	brne	.-46     	; 0x13c <lcd_num+0x20>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(100);
		n/=10;
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <lcd_string>:

void lcd_string(char *ser)            
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 17c:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 180:	89 91       	ld	r24, Y+
 182:	88 23       	and	r24, r24
 184:	d9 f7       	brne	.-10     	; 0x17c <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <usart_initialize>:
#include<avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL
void usart_initialize()
{
 18c:	10 bc       	out	0x20, r1	; 32
	UBRRH=0;
	UBRRL=51;
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	80 bd       	out	0x20, r24	; 32
}
 19a:	08 95       	ret

0000019c <usart_transmit>:
void usart_transmit(char data)
{
 19c:	5d 9b       	sbis	0x0b, 5	; 11
 19e:	fe cf       	rjmp	.-4      	; 0x19c <usart_transmit>
	while((UCSRA&0x20)==0);
	UDR=data;
 1a0:	8c b9       	out	0x0c, r24	; 12
}
 1a2:	08 95       	ret

000001a4 <usart_receive>:
char usart_receive()
{
 1a4:	5f 9b       	sbis	0x0b, 7	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <usart_receive>
	while((UCSRA&0X80)==0);
	return UDR;
 1a8:	8c b1       	in	r24, 0x0c	; 12
}
 1aa:	08 95       	ret

000001ac <send1>:
#include<util/delay.h>

int i;
char buff[20],value,value1,value2;
void send1()
{
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	97 e2       	ldi	r25, 0x27	; 39
 1b4:	28 ec       	ldi	r18, 0xC8	; 200
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <send1+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c0:	d9 f7       	brne	.-10     	; 0x1b8 <send1+0xc>
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <send1+0x16>
	UDR=data;
 1c6:	8f ee       	ldi	r24, 0xEF	; 239
 1c8:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <send1+0x1e>
	UDR=data;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1d2:	5d 9b       	sbis	0x0b, 5	; 11
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <send1+0x26>
	UDR=data;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <send1+0x2e>
	UDR=data;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <send1+0x36>
	UDR=data;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <send1+0x3e>
	UDR=data;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1f2:	5d 9b       	sbis	0x0b, 5	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <send1+0x46>
	UDR=data;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 1fa:	5d 9b       	sbis	0x0b, 5	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <send1+0x4e>
	UDR=data;
 1fe:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 200:	5d 9b       	sbis	0x0b, 5	; 11
 202:	fe cf       	rjmp	.-4      	; 0x200 <send1+0x54>
	UDR=data;
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <send1+0x5c>
	UDR=data;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 210:	5d 9b       	sbis	0x0b, 5	; 11
 212:	fe cf       	rjmp	.-4      	; 0x210 <send1+0x64>
	UDR=data;
 214:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 216:	5d 9b       	sbis	0x0b, 5	; 11
 218:	fe cf       	rjmp	.-4      	; 0x216 <send1+0x6a>
	UDR=data;
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	8c b9       	out	0x0c, r24	; 12
	PORTC=0B10000000;
	_delay_ms(1000);
	usart_transmit(0xEF);usart_transmit(0x01);usart_transmit(0xFF);usart_transmit(0xFF);
	usart_transmit(0xFF);usart_transmit(0xFF);usart_transmit(0x01);usart_transmit(0x00);
	usart_transmit(0x03);usart_transmit(0x01);usart_transmit(0x00);usart_transmit(0x05);
}
 21e:	08 95       	ret

00000220 <send2>:



void send2()
{	PORTC=0B00010000;
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	85 bb       	out	0x15, r24	; 21
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 224:	5d 9b       	sbis	0x0b, 5	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <send2+0x4>
	UDR=data;
 228:	8f ee       	ldi	r24, 0xEF	; 239
 22a:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 22c:	5d 9b       	sbis	0x0b, 5	; 11
 22e:	fe cf       	rjmp	.-4      	; 0x22c <send2+0xc>
	UDR=data;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 234:	5d 9b       	sbis	0x0b, 5	; 11
 236:	fe cf       	rjmp	.-4      	; 0x234 <send2+0x14>
	UDR=data;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 23c:	5d 9b       	sbis	0x0b, 5	; 11
 23e:	fe cf       	rjmp	.-4      	; 0x23c <send2+0x1c>
	UDR=data;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 244:	5d 9b       	sbis	0x0b, 5	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <send2+0x24>
	UDR=data;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 24c:	5d 9b       	sbis	0x0b, 5	; 11
 24e:	fe cf       	rjmp	.-4      	; 0x24c <send2+0x2c>
	UDR=data;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <send2+0x34>
	UDR=data;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 25c:	5d 9b       	sbis	0x0b, 5	; 11
 25e:	fe cf       	rjmp	.-4      	; 0x25c <send2+0x3c>
	UDR=data;
 260:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 262:	5d 9b       	sbis	0x0b, 5	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <send2+0x42>
	UDR=data;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 26a:	5d 9b       	sbis	0x0b, 5	; 11
 26c:	fe cf       	rjmp	.-4      	; 0x26a <send2+0x4a>
	UDR=data;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 272:	5d 9b       	sbis	0x0b, 5	; 11
 274:	fe cf       	rjmp	.-4      	; 0x272 <send2+0x52>
	UDR=data;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 27a:	5d 9b       	sbis	0x0b, 5	; 11
 27c:	fe cf       	rjmp	.-4      	; 0x27a <send2+0x5a>
	UDR=data;
 27e:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 280:	5d 9b       	sbis	0x0b, 5	; 11
 282:	fe cf       	rjmp	.-4      	; 0x280 <send2+0x60>
	UDR=data;
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	8c b9       	out	0x0c, r24	; 12
	usart_transmit(0xEF);usart_transmit(0x01);usart_transmit(0xFF);usart_transmit(0xFF);
	usart_transmit(0xFF);usart_transmit(0xFF);usart_transmit(0x01);usart_transmit(0x00);
	usart_transmit(0x04);usart_transmit(0x02);usart_transmit(0x01);usart_transmit(0x00);
	usart_transmit(0x08);
}
 288:	08 95       	ret

0000028a <send3>:

void send3()
{	PORTC=0B00000010;
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	85 bb       	out	0x15, r24	; 21
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 28e:	5d 9b       	sbis	0x0b, 5	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <send3+0x4>
	UDR=data;
 292:	8f ee       	ldi	r24, 0xEF	; 239
 294:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <send3+0xc>
	UDR=data;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 29e:	5d 9b       	sbis	0x0b, 5	; 11
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <send3+0x14>
	UDR=data;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2a6:	5d 9b       	sbis	0x0b, 5	; 11
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <send3+0x1c>
	UDR=data;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2ae:	5d 9b       	sbis	0x0b, 5	; 11
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <send3+0x24>
	UDR=data;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2b6:	5d 9b       	sbis	0x0b, 5	; 11
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <send3+0x2c>
	UDR=data;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2be:	5d 9b       	sbis	0x0b, 5	; 11
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <send3+0x34>
	UDR=data;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2c6:	5d 9b       	sbis	0x0b, 5	; 11
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <send3+0x3c>
	UDR=data;
 2ca:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2cc:	5d 9b       	sbis	0x0b, 5	; 11
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <send3+0x42>
	UDR=data;
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2d4:	5d 9b       	sbis	0x0b, 5	; 11
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <send3+0x4a>
	UDR=data;
 2d8:	8b e1       	ldi	r24, 0x1B	; 27
 2da:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2dc:	5d 9b       	sbis	0x0b, 5	; 11
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <send3+0x52>
	UDR=data;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2e4:	5d 9b       	sbis	0x0b, 5	; 11
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <send3+0x5a>
	UDR=data;
 2e8:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2ea:	5d 9b       	sbis	0x0b, 5	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <send3+0x60>
	UDR=data;
 2ee:	1c b8       	out	0x0c, r1	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2f0:	5d 9b       	sbis	0x0b, 5	; 11
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <send3+0x66>
	UDR=data;
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 2f8:	5d 9b       	sbis	0x0b, 5	; 11
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <send3+0x6e>
	UDR=data;
 2fc:	89 ee       	ldi	r24, 0xE9	; 233
 2fe:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 300:	5d 9b       	sbis	0x0b, 5	; 11
 302:	fe cf       	rjmp	.-4      	; 0x300 <send3+0x76>
	UDR=data;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	8c b9       	out	0x0c, r24	; 12
	UCSRB=0X18;
	UCSRC=0X86;
}
void usart_transmit(char data)
{
	while((UCSRA&0x20)==0);
 308:	5d 9b       	sbis	0x0b, 5	; 11
 30a:	fe cf       	rjmp	.-4      	; 0x308 <send3+0x7e>
	UDR=data;
 30c:	81 e1       	ldi	r24, 0x11	; 17
 30e:	8c b9       	out	0x0c, r24	; 12
	usart_transmit(0xEF);usart_transmit(0x01);usart_transmit(0xFF);usart_transmit(0xFF);
	usart_transmit(0xFF);usart_transmit(0xFF);usart_transmit(0x01);usart_transmit(0x00);
	usart_transmit(0x08);usart_transmit(0x1B);usart_transmit(0x01);usart_transmit(0x00);
	usart_transmit(0x00);usart_transmit(0x03);usart_transmit(0xE9);usart_transmit(0x01);
	usart_transmit(0x11);
}
 310:	08 95       	ret

00000312 <got_data>:

void got_data()
{	PORTC=0B11000000;
 312:	80 ec       	ldi	r24, 0xC0	; 192
 314:	85 bb       	out	0x15, r24	; 21
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	04 c0       	rjmp	.+8      	; 0x324 <got_data+0x12>
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 31c:	5f 9b       	sbis	0x0b, 7	; 11
 31e:	fe cf       	rjmp	.-4      	; 0x31c <got_data+0xa>
	return UDR;
 320:	2c b1       	in	r18, 0x0c	; 12
 322:	01 96       	adiw	r24, 0x01	; 1
	for(i=0;i<9;i++)
 324:	89 30       	cpi	r24, 0x09	; 9
 326:	91 05       	cpc	r25, r1
 328:	cc f3       	brlt	.-14     	; 0x31c <got_data+0xa>
 32a:	90 93 7d 00 	sts	0x007D, r25
 32e:	80 93 7c 00 	sts	0x007C, r24
{
	value=usart_receive();
}
	PORTC=0B00110000;
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	85 bb       	out	0x15, r24	; 21
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 336:	5f 9b       	sbis	0x0b, 7	; 11
 338:	fe cf       	rjmp	.-4      	; 0x336 <got_data+0x24>
	return UDR;
 33a:	8c b1       	in	r24, 0x0c	; 12
	value1=usart_receive();
 33c:	80 93 7f 00 	sts	0x007F, r24
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 340:	5f 9b       	sbis	0x0b, 7	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <got_data+0x2e>
	return UDR;
 344:	8c b1       	in	r24, 0x0c	; 12
value=usart_receive();
 346:	80 93 80 00 	sts	0x0080, r24
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 34a:	5f 9b       	sbis	0x0b, 7	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <got_data+0x38>
	return UDR;
 34e:	8c b1       	in	r24, 0x0c	; 12
	value2=usart_receive();
 350:	80 93 7e 00 	sts	0x007E, r24
}
 354:	08 95       	ret

00000356 <main>:

int main(void)
{
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
	DDRD=0X02;				// USART
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	81 bb       	out	0x11, r24	; 17
	DDRB=0XFF;				// LCD
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;				
 362:	84 bb       	out	0x14, r24	; 20
#include<avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL
void usart_initialize()
{
	UBRRH=0;
 364:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
 366:	83 e3       	ldi	r24, 0x33	; 51
 368:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
 36a:	88 e1       	ldi	r24, 0x18	; 24
 36c:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
 36e:	86 e8       	ldi	r24, 0x86	; 134
 370:	80 bd       	out	0x20, r24	; 32
 372:	00 e2       	ldi	r16, 0x20	; 32
 374:	1e e4       	ldi	r17, 0x4E	; 78
 376:	c8 01       	movw	r24, r16
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x22>

	usart_initialize();
	_delay_ms(10);
	lcd_initialize();
 37c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
 380:	c8 01       	movw	r24, r16
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x2c>
	_delay_ms(10);

	lcd_cmd(0x8a);
 386:	8a e8       	ldi	r24, 0x8A	; 138
 388:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_string("Lokesh");
 38c:	80 e6       	ldi	r24, 0x60	; 96
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>

	send1();
 394:	0e 94 d6 00 	call	0x1ac	; 0x1ac <send1>
	PORTC=0B01000000;
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	85 bb       	out	0x15, r24	; 21
 39c:	20 91 80 00 	lds	r18, 0x0080
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <main+0x58>
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 3a6:	5f 9b       	sbis	0x0b, 7	; 11
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0x50>
	return UDR;
 3aa:	2c b1       	in	r18, 0x0c	; 12
 3ac:	01 96       	adiw	r24, 0x01	; 1

	for(i=0;i<12;i++)
 3ae:	8c 30       	cpi	r24, 0x0C	; 12
 3b0:	91 05       	cpc	r25, r1
 3b2:	cc f3       	brlt	.-14     	; 0x3a6 <main+0x50>
 3b4:	20 93 80 00 	sts	0x0080, r18
 3b8:	90 93 7d 00 	sts	0x007D, r25
 3bc:	80 93 7c 00 	sts	0x007C, r24
{
	value=usart_receive();
}
	PORTC=0B00100000;
 3c0:	80 e2       	ldi	r24, 0x20	; 32
 3c2:	85 bb       	out	0x15, r24	; 21
	send2();
 3c4:	0e 94 10 01 	call	0x220	; 0x220 <send2>
	PORTC=0B00001000;
 3c8:	88 e0       	ldi	r24, 0x08	; 8
 3ca:	85 bb       	out	0x15, r24	; 21
 3cc:	20 91 80 00 	lds	r18, 0x0080
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <main+0x88>
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 3d6:	5f 9b       	sbis	0x0b, 7	; 11
 3d8:	fe cf       	rjmp	.-4      	; 0x3d6 <main+0x80>
	return UDR;
 3da:	2c b1       	in	r18, 0x0c	; 12
 3dc:	01 96       	adiw	r24, 0x01	; 1
	for(i=0;i<12;i++)
 3de:	8c 30       	cpi	r24, 0x0C	; 12
 3e0:	91 05       	cpc	r25, r1
 3e2:	cc f3       	brlt	.-14     	; 0x3d6 <main+0x80>
 3e4:	20 93 80 00 	sts	0x0080, r18
 3e8:	90 93 7d 00 	sts	0x007D, r25
 3ec:	80 93 7c 00 	sts	0x007C, r24
{
	value=usart_receive();
}
	PORTC=0B00000100;
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	85 bb       	out	0x15, r24	; 21
	send3();
 3f4:	0e 94 45 01 	call	0x28a	; 0x28a <send3>
	PORTC=0B00000001;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	85 bb       	out	0x15, r24	; 21
	got_data();
 3fc:	0e 94 89 01 	call	0x312	; 0x312 <got_data>
	PORTC=0B00001100;
 400:	8c e0       	ldi	r24, 0x0C	; 12
 402:	85 bb       	out	0x15, r24	; 21

	lcd_cmd(0xc4);
 404:	84 ec       	ldi	r24, 0xC4	; 196
 406:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_num(value1);
 40a:	80 91 7f 00 	lds	r24, 0x007F
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_num>

	lcd_cmd(0xc8);
 414:	88 ec       	ldi	r24, 0xC8	; 200
 416:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_num(value2);
 41a:	80 91 7e 00 	lds	r24, 0x007E
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_num>
/*	sprintf(buff,"%d--%d",value1,value2);
	lcd_cmd(0x85);
	lcd_string(buff);
	_delay_ms(1000); */

}
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <__udivmodhi4>:
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	51 e1       	ldi	r21, 0x11	; 17
 434:	07 c0       	rjmp	.+14     	; 0x444 <__udivmodhi4_ep>

00000436 <__udivmodhi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	a6 17       	cp	r26, r22
 43c:	b7 07       	cpc	r27, r23
 43e:	10 f0       	brcs	.+4      	; 0x444 <__udivmodhi4_ep>
 440:	a6 1b       	sub	r26, r22
 442:	b7 0b       	sbc	r27, r23

00000444 <__udivmodhi4_ep>:
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	5a 95       	dec	r21
 44a:	a9 f7       	brne	.-22     	; 0x436 <__udivmodhi4_loop>
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	bc 01       	movw	r22, r24
 452:	cd 01       	movw	r24, r26
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
