
Bluetooth+appKeys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000051  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000108  00000000  00000000  000001c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b7  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000187  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_initialize>:
#include<util/delay.h>

#define F_CPU 8000000UL

void usart_initialize()
{
  92:	10 bc       	out	0x20, r1	; 32
	UBRRH=0;
	UBRRL=12;
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <usart_send>:
void usart_send(char data)
{
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
	while((UCSRA&0x20)==0);
	UDR=data;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_receive>:
char usart_receive()
{
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <usart_receive>
	while((UCSRA&0X80)==0);
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <main>:
void main()
{	
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	81 bb       	out	0x11, r24	; 17
	DDRD=0X02;
	DDRB=0XFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23

#define F_CPU 8000000UL

void usart_initialize()
{
	UBRRH=0;
  ba:	10 bc       	out	0x20, r1	; 32
	UBRRL=12;
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	80 bd       	out	0x20, r24	; 32
		PORTB=0B00001010;
		
	}
	else if(a=='L')
	{
		PORTB=0B00001001;
  c8:	49 e0       	ldi	r20, 0x09	; 9
		PORTB=0B00000110;
		
	}
	else if(a=='F')
	{
		PORTB=0B00001010;
  ca:	3a e0       	ldi	r19, 0x0A	; 10
		PORTB=0B00000101;
		
	}
	else if(a=='R')
	{
		PORTB=0B00000110;
  cc:	26 e0       	ldi	r18, 0x06	; 6
 char a=usart_receive();
 

	if(a=='B')
	{
		PORTB=0B00000101;
  ce:	95 e0       	ldi	r25, 0x05	; 5
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x1e>
	return UDR;
  d4:	8c b1       	in	r24, 0x0c	; 12
	while(1)
	{	
 char a=usart_receive();
 

	if(a=='B')
  d6:	82 34       	cpi	r24, 0x42	; 66
  d8:	11 f4       	brne	.+4      	; 0xde <main+0x2c>
	{
		PORTB=0B00000101;
  da:	98 bb       	out	0x18, r25	; 24
  dc:	f9 cf       	rjmp	.-14     	; 0xd0 <main+0x1e>
		
	}
	else if(a=='R')
  de:	82 35       	cpi	r24, 0x52	; 82
  e0:	11 f4       	brne	.+4      	; 0xe6 <main+0x34>
	{
		PORTB=0B00000110;
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	f5 cf       	rjmp	.-22     	; 0xd0 <main+0x1e>
		
	}
	else if(a=='F')
  e6:	86 34       	cpi	r24, 0x46	; 70
  e8:	11 f4       	brne	.+4      	; 0xee <main+0x3c>
	{
		PORTB=0B00001010;
  ea:	38 bb       	out	0x18, r19	; 24
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <main+0x1e>
		
	}
	else if(a=='L')
  ee:	8c 34       	cpi	r24, 0x4C	; 76
  f0:	11 f4       	brne	.+4      	; 0xf6 <main+0x44>
	{
		PORTB=0B00001001;
  f2:	48 bb       	out	0x18, r20	; 24
  f4:	ed cf       	rjmp	.-38     	; 0xd0 <main+0x1e>
		
	}
	else if(a=='S')
  f6:	83 35       	cpi	r24, 0x53	; 83
  f8:	59 f7       	brne	.-42     	; 0xd0 <main+0x1e>
	{
		PORTB=0X00;
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	e9 cf       	rjmp	.-46     	; 0xd0 <main+0x1e>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
