
Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000051  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000182  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f5  00000000  00000000  000003b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000157  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c7  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  0000071b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_initialize>:
#include<util/delay.h>

#define F_CPU 8000000UL

void usart_initialize()
{
  92:	10 bc       	out	0x20, r1	; 32
	UBRRH=0;
	UBRRL=12;
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <usart_send>:
void usart_send(char data)
{
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
	while((UCSRA&0x20)==0);
	UDR=data;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_receive>:
char usart_receive()
{
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <usart_receive>
	while((UCSRA&0X80)==0);
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <main>:
void main()
{	int i=0;
  b2:	1f 93       	push	r17
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	28 97       	sbiw	r28, 0x08	; 8
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	char a[5],b[3]={'B','A','C','K'},f[4]={"FRONT"},l[3]={"LEFT"},s[3]={"STOP"},r[4]={"RIGHT"};
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x20>

	DDRD=0X02;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	81 bb       	out	0x11, r24	; 17
	DDRB=0XFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23

#define F_CPU 8000000UL

void usart_initialize()
{
	UBRRH=0;
  e2:	10 bc       	out	0x20, r1	; 32
	UBRRL=12;
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
  ec:	86 e8       	ldi	r24, 0x86	; 134
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
	usart_initialize();
	
	while(1)
	{	for(int i=0;i<5;i++)
	{
 a[i]=usart_receive();
  f4:	ae 01       	movw	r20, r28
  f6:	4c 5f       	subi	r20, 0xFC	; 252
  f8:	5f 4f       	sbci	r21, 0xFF	; 255
 }
	for(i=0; i<5;i++)
	{
	if(a[i]==b[i])
  fa:	be 01       	movw	r22, r28
  fc:	6f 5f       	subi	r22, 0xFF	; 255
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		PORTB=0B00000101;
 100:	15 e0       	ldi	r17, 0x05	; 5
 102:	09 c0       	rjmp	.+18     	; 0x116 <main+0x64>
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 104:	5f 9b       	sbis	0x0b, 7	; 11
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x52>
	return UDR;
 108:	8c b1       	in	r24, 0x0c	; 12
	usart_initialize();
	
	while(1)
	{	for(int i=0;i<5;i++)
	{
 a[i]=usart_receive();
 10a:	fa 01       	movw	r30, r20
 10c:	e2 0f       	add	r30, r18
 10e:	f3 1f       	adc	r31, r19
 110:	80 83       	st	Z, r24
	DDRB=0XFF;

	usart_initialize();
	
	while(1)
	{	for(int i=0;i<5;i++)
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	25 30       	cpi	r18, 0x05	; 5
 118:	31 05       	cpc	r19, r1
 11a:	a4 f3       	brlt	.-24     	; 0x104 <main+0x52>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
	{
 a[i]=usart_receive();
 }
	for(i=0; i<5;i++)
	{
	if(a[i]==b[i])
 120:	fa 01       	movw	r30, r20
 122:	e2 0f       	add	r30, r18
 124:	f3 1f       	adc	r31, r19
 126:	db 01       	movw	r26, r22
 128:	a2 0f       	add	r26, r18
 12a:	b3 1f       	adc	r27, r19
 12c:	90 81       	ld	r25, Z
 12e:	8c 91       	ld	r24, X
 130:	98 17       	cp	r25, r24
 132:	09 f4       	brne	.+2      	; 0x136 <main+0x84>
	{
		PORTB=0B00000101;
 134:	18 bb       	out	0x18, r17	; 24
	while(1)
	{	for(int i=0;i<5;i++)
	{
 a[i]=usart_receive();
 }
	for(i=0; i<5;i++)
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	25 30       	cpi	r18, 0x05	; 5
 13c:	31 05       	cpc	r19, r1
 13e:	81 f7       	brne	.-32     	; 0x120 <main+0x6e>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	e8 cf       	rjmp	.-48     	; 0x116 <main+0x64>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
