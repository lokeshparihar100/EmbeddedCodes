
LCDBitwise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000053  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028a  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000135  00000000  00000000  000004f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002aa  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000117  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009e  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8a:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x28);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	98 bb       	out	0x18, r25	; 24
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  9a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN); 
  9c:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 ea       	ldi	r18, 0xA8	; 168
  a0:	31 e6       	ldi	r19, 0x61	; 97
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(100);
	lcd &= ~(1<<EN);
  a8:	c2 98       	cbi	0x18, 2	; 24
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	88 bb       	out	0x18, r24	; 24
	lcd &= ~(1<<RS);
  b0:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  b2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
  bc:	c2 98       	cbi	0x18, 2	; 24
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x0c);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	98 bb       	out	0x18, r25	; 24
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  f2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	28 ea       	ldi	r18, 0xA8	; 168
  f8:	31 e6       	ldi	r19, 0x61	; 97
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 100:	c2 98       	cbi	0x18, 2	; 24
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	88 bb       	out	0x18, r24	; 24
	lcd |= (1<<RS);
 108:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
 10a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 114:	c2 98       	cbi	0x18, 2	; 24
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	09 e1       	ldi	r16, 0x19	; 25
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	15 c0       	rjmp	.+42     	; 0x152 <lcd_num+0x3a>
	int i=0;
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 bd 00 	call	0x17a	; 0x17a <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	97 e2       	ldi	r25, 0x27	; 39
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_num+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <lcd_num+0x24>
		_delay_ms(1000);
		n/=10;
 146:	ce 01       	movw	r24, r28
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 bd 00 	call	0x17a	; 0x17a <__udivmodhi4>
 150:	eb 01       	movw	r28, r22


void lcd_num(unsigned int n)
{
	int i=0;
	while(n!=0)
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	49 f7       	brne	.-46     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(1000);
		n/=10;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <main>:
	_delay_ms(100);
	lcd &= ~(1<<EN);
}

void main()
{
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	81 bb       	out	0x11, r24	; 17
	int a;
	DDRD=0XFF;
	DDRA=0X00;
 164:	1a ba       	out	0x1a, r1	; 26
	lcd_initialize();
 166:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
	lcd_cmd(0x81);
 16a:	81 e8       	ldi	r24, 0x81	; 129
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_num(567);
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>

	
}
 178:	08 95       	ret

0000017a <__udivmodhi4>:
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	51 e1       	ldi	r21, 0x11	; 17
 180:	07 c0       	rjmp	.+14     	; 0x190 <__udivmodhi4_ep>

00000182 <__udivmodhi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	a6 17       	cp	r26, r22
 188:	b7 07       	cpc	r27, r23
 18a:	10 f0       	brcs	.+4      	; 0x190 <__udivmodhi4_ep>
 18c:	a6 1b       	sub	r26, r22
 18e:	b7 0b       	sbc	r27, r23

00000190 <__udivmodhi4_ep>:
 190:	88 1f       	adc	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	5a 95       	dec	r21
 196:	a9 f7       	brne	.-22     	; 0x182 <__udivmodhi4_loop>
 198:	80 95       	com	r24
 19a:	90 95       	com	r25
 19c:	bc 01       	movw	r22, r24
 19e:	cd 01       	movw	r24, r26
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
