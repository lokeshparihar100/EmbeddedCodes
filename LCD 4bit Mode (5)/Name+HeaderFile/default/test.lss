
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002dd  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000168  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000336  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000116  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009e  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x28);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	92 bb       	out	0x12, r25	; 18
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  9a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN); 
  9c:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 ea       	ldi	r18, 0xA8	; 168
  a0:	31 e6       	ldi	r19, 0x61	; 97
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(100);
	lcd &= ~(1<<EN);
  a8:	92 98       	cbi	0x12, 2	; 18
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	82 bb       	out	0x12, r24	; 18
	lcd &= ~(1<<RS);
  b0:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  b2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  b4:	92 9a       	sbi	0x12, 2	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
  bc:	92 98       	cbi	0x12, 2	; 18
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x0c);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	92 bb       	out	0x12, r25	; 18
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  f2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  f4:	92 9a       	sbi	0x12, 2	; 18
  f6:	28 ea       	ldi	r18, 0xA8	; 168
  f8:	31 e6       	ldi	r19, 0x61	; 97
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 100:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	82 bb       	out	0x12, r24	; 18
	lcd |= (1<<RS);
 108:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
 10a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
 10c:	92 9a       	sbi	0x12, 2	; 18
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 114:	92 98       	cbi	0x12, 2	; 18
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	09 e1       	ldi	r16, 0x19	; 25
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	15 c0       	rjmp	.+42     	; 0x152 <lcd_num+0x3a>
	int i=0;
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	97 e2       	ldi	r25, 0x27	; 39
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_num+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <lcd_num+0x24>
		_delay_ms(1000);
		n/=10;
 146:	ce 01       	movw	r24, r28
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 150:	eb 01       	movw	r28, r22


void lcd_num(unsigned int n)
{
	int i=0;
	while(n!=0)
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	49 f7       	brne	.-46     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(1000);
		n/=10;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/lcd.h>

void main()
{
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	e4 97       	sbiw	r28, 0x34	; 52
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	
	 int i,a[6]={0x80,0x81,0x82,0x83,0x84,0x85};
 188:	de 01       	movw	r26, r28
 18a:	11 96       	adiw	r26, 0x01	; 1
 18c:	e8 e8       	ldi	r30, 0x88	; 136
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	81 50       	subi	r24, 0x01	; 1
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x32>
	 int c[7]={0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6};
 19a:	de 01       	movw	r26, r28
 19c:	59 96       	adiw	r26, 0x19	; 25
 19e:	ea e7       	ldi	r30, 0x7A	; 122
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x44>
	 int b[6]={'L','O','K','E','S','H'};
 1ac:	de 01       	movw	r26, r28
 1ae:	1d 96       	adiw	r26, 0x0d	; 13
 1b0:	ee e6       	ldi	r30, 0x6E	; 110
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x56>
	 int d[7]={'P','A','R','I','H','A','R'};
 1be:	de 01       	movw	r26, r28
 1c0:	97 96       	adiw	r26, 0x27	; 39
 1c2:	e0 e6       	ldi	r30, 0x60	; 96
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8e e0       	ldi	r24, 0x0E	; 14
 1c8:	01 90       	ld	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x68>
	DDRD=0XFF;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	81 bb       	out	0x11, r24	; 17

	lcd_initialize();
 1d4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0;i<8;i++)
	{
	lcd_cmd(a[i]);
 1dc:	4e 01       	movw	r8, r28
 1de:	08 94       	sec
 1e0:	81 1c       	adc	r8, r1
 1e2:	91 1c       	adc	r9, r1
	lcd_data(b[i]);
 1e4:	2d e0       	ldi	r18, 0x0D	; 13
 1e6:	a2 2e       	mov	r10, r18
 1e8:	b1 2c       	mov	r11, r1
 1ea:	ac 0e       	add	r10, r28
 1ec:	bd 1e       	adc	r11, r29
	lcd_cmd(c[i]);
 1ee:	99 e1       	ldi	r25, 0x19	; 25
 1f0:	c9 2e       	mov	r12, r25
 1f2:	d1 2c       	mov	r13, r1
 1f4:	cc 0e       	add	r12, r28
 1f6:	dd 1e       	adc	r13, r29
	lcd_data(d[i]);
 1f8:	87 e2       	ldi	r24, 0x27	; 39
 1fa:	e8 2e       	mov	r14, r24
 1fc:	f1 2c       	mov	r15, r1
 1fe:	ec 0e       	add	r14, r28
 200:	fd 1e       	adc	r15, r29
	DDRD=0XFF;

	lcd_initialize();
	for(i=0;i<8;i++)
	{
	lcd_cmd(a[i]);
 202:	f4 01       	movw	r30, r8
 204:	e0 0f       	add	r30, r16
 206:	f1 1f       	adc	r31, r17
 208:	80 81       	ld	r24, Z
 20a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_data(b[i]);
 20e:	f5 01       	movw	r30, r10
 210:	e0 0f       	add	r30, r16
 212:	f1 1f       	adc	r31, r17
 214:	80 81       	ld	r24, Z
 216:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
	lcd_cmd(c[i]);
 21a:	f6 01       	movw	r30, r12
 21c:	e0 0f       	add	r30, r16
 21e:	f1 1f       	adc	r31, r17
 220:	80 81       	ld	r24, Z
 222:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_data(d[i]);
 226:	f7 01       	movw	r30, r14
 228:	e0 0f       	add	r30, r16
 22a:	f1 1f       	adc	r31, r17
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 232:	0e 5f       	subi	r16, 0xFE	; 254
 234:	1f 4f       	sbci	r17, 0xFF	; 255
	 int b[6]={'L','O','K','E','S','H'};
	 int d[7]={'P','A','R','I','H','A','R'};
	DDRD=0XFF;

	lcd_initialize();
	for(i=0;i<8;i++)
 236:	00 31       	cpi	r16, 0x10	; 16
 238:	11 05       	cpc	r17, r1
 23a:	19 f7       	brne	.-58     	; 0x202 <main+0xa2>
	lcd_cmd(c[i]);
	lcd_data(d[i]);
	}
	

}
 23c:	e4 96       	adiw	r28, 0x34	; 52
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	9f 90       	pop	r9
 25e:	8f 90       	pop	r8
 260:	08 95       	ret

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
