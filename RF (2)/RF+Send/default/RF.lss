
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000026  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a0  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006a  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ce  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000091  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000005f9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  8a:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <keypad>:
#include<avr/io.h>
#include<util/delay.h>

int keypad()                         // Function for Keypad
{
  92:	3e ef       	ldi	r19, 0xFE	; 254
	{	while(PINC==0b01111110);
		return '*';
	}


PORTC=0b11111101;
  94:	2d ef       	ldi	r18, 0xFD	; 253
	{	while(PINC==0b01111101);
		return 0;
	}


PORTC=0b11111011;
  96:	9b ef       	ldi	r25, 0xFB	; 251
int keypad()                         // Function for Keypad
{
	while(1)
	{
		
PORTC=0b11111110;
  98:	35 bb       	out	0x15, r19	; 21

	if(PINC==0b11101110)
  9a:	83 b3       	in	r24, 0x13	; 19
  9c:	8e 3e       	cpi	r24, 0xEE	; 238
  9e:	31 f4       	brne	.+12     	; 0xac <keypad+0x1a>
	{  while(PINC==0b11101110);
  a0:	83 b3       	in	r24, 0x13	; 19
  a2:	8e 3e       	cpi	r24, 0xEE	; 238
  a4:	e9 f3       	breq	.-6      	; 0xa0 <keypad+0xe>
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	65 c0       	rjmp	.+202    	; 0x176 <keypad+0xe4>
		return 1;
	}
	 else if(PINC==0b11011110)
  ac:	83 b3       	in	r24, 0x13	; 19
  ae:	8e 3d       	cpi	r24, 0xDE	; 222
  b0:	31 f4       	brne	.+12     	; 0xbe <keypad+0x2c>
	{	while(PINC==0b11011110);
  b2:	83 b3       	in	r24, 0x13	; 19
  b4:	8e 3d       	cpi	r24, 0xDE	; 222
  b6:	e9 f3       	breq	.-6      	; 0xb2 <keypad+0x20>
  b8:	24 e0       	ldi	r18, 0x04	; 4
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	5c c0       	rjmp	.+184    	; 0x176 <keypad+0xe4>
		return 4;
	}
	else if(PINC==0b10111110)
  be:	83 b3       	in	r24, 0x13	; 19
  c0:	8e 3b       	cpi	r24, 0xBE	; 190
  c2:	31 f4       	brne	.+12     	; 0xd0 <keypad+0x3e>
	{	while(PINC==0b10111110);
  c4:	83 b3       	in	r24, 0x13	; 19
  c6:	8e 3b       	cpi	r24, 0xBE	; 190
  c8:	e9 f3       	breq	.-6      	; 0xc4 <keypad+0x32>
  ca:	27 e0       	ldi	r18, 0x07	; 7
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	53 c0       	rjmp	.+166    	; 0x176 <keypad+0xe4>
		return 7;
	}
	 else if(PINC==0b01111110)
  d0:	83 b3       	in	r24, 0x13	; 19
  d2:	8e 37       	cpi	r24, 0x7E	; 126
  d4:	31 f4       	brne	.+12     	; 0xe2 <keypad+0x50>
	{	while(PINC==0b01111110);
  d6:	83 b3       	in	r24, 0x13	; 19
  d8:	8e 37       	cpi	r24, 0x7E	; 126
  da:	e9 f3       	breq	.-6      	; 0xd6 <keypad+0x44>
  dc:	2a e2       	ldi	r18, 0x2A	; 42
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	4a c0       	rjmp	.+148    	; 0x176 <keypad+0xe4>
		return '*';
	}


PORTC=0b11111101;
  e2:	25 bb       	out	0x15, r18	; 21

	if(PINC==0b11101101)
  e4:	83 b3       	in	r24, 0x13	; 19
  e6:	8d 3e       	cpi	r24, 0xED	; 237
  e8:	31 f4       	brne	.+12     	; 0xf6 <keypad+0x64>
	{	while(PINC==0b11101101);
  ea:	83 b3       	in	r24, 0x13	; 19
  ec:	8d 3e       	cpi	r24, 0xED	; 237
  ee:	e9 f3       	breq	.-6      	; 0xea <keypad+0x58>
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 c0       	rjmp	.+128    	; 0x176 <keypad+0xe4>
		return 2;
	}
	 else if(PINC==0b11011101)
  f6:	83 b3       	in	r24, 0x13	; 19
  f8:	8d 3d       	cpi	r24, 0xDD	; 221
  fa:	31 f4       	brne	.+12     	; 0x108 <keypad+0x76>
	{	while(PINC==0b11011101);
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	8d 3d       	cpi	r24, 0xDD	; 221
 100:	e9 f3       	breq	.-6      	; 0xfc <keypad+0x6a>
 102:	25 e0       	ldi	r18, 0x05	; 5
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	37 c0       	rjmp	.+110    	; 0x176 <keypad+0xe4>
		return 5;
	}
	else if(PINC==0b10111101)
 108:	83 b3       	in	r24, 0x13	; 19
 10a:	8d 3b       	cpi	r24, 0xBD	; 189
 10c:	31 f4       	brne	.+12     	; 0x11a <keypad+0x88>
	{	while(PINC==0b10111101);
 10e:	83 b3       	in	r24, 0x13	; 19
 110:	8d 3b       	cpi	r24, 0xBD	; 189
 112:	e9 f3       	breq	.-6      	; 0x10e <keypad+0x7c>
 114:	28 e0       	ldi	r18, 0x08	; 8
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	2e c0       	rjmp	.+92     	; 0x176 <keypad+0xe4>
		return 8;
	}
	 else if(PINC==0b01111101)
 11a:	83 b3       	in	r24, 0x13	; 19
 11c:	8d 37       	cpi	r24, 0x7D	; 125
 11e:	31 f4       	brne	.+12     	; 0x12c <keypad+0x9a>
	{	while(PINC==0b01111101);
 120:	83 b3       	in	r24, 0x13	; 19
 122:	8d 37       	cpi	r24, 0x7D	; 125
 124:	e9 f3       	breq	.-6      	; 0x120 <keypad+0x8e>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	25 c0       	rjmp	.+74     	; 0x176 <keypad+0xe4>
		return 0;
	}


PORTC=0b11111011;
 12c:	95 bb       	out	0x15, r25	; 21

	if(PINC==0b11101011)
 12e:	83 b3       	in	r24, 0x13	; 19
 130:	8b 3e       	cpi	r24, 0xEB	; 235
 132:	31 f4       	brne	.+12     	; 0x140 <keypad+0xae>
	{	while(PINC==0b11101011);
 134:	83 b3       	in	r24, 0x13	; 19
 136:	8b 3e       	cpi	r24, 0xEB	; 235
 138:	e9 f3       	breq	.-6      	; 0x134 <keypad+0xa2>
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	1b c0       	rjmp	.+54     	; 0x176 <keypad+0xe4>
		return 3;
	}
	 else if(PINC==0b11011011)
 140:	83 b3       	in	r24, 0x13	; 19
 142:	8b 3d       	cpi	r24, 0xDB	; 219
 144:	31 f4       	brne	.+12     	; 0x152 <keypad+0xc0>
	{	while(PINC==0b11011011);
 146:	83 b3       	in	r24, 0x13	; 19
 148:	8b 3d       	cpi	r24, 0xDB	; 219
 14a:	e9 f3       	breq	.-6      	; 0x146 <keypad+0xb4>
 14c:	26 e0       	ldi	r18, 0x06	; 6
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	12 c0       	rjmp	.+36     	; 0x176 <keypad+0xe4>
		return 6;
	}
	else if(PINC==0b10111011)
 152:	83 b3       	in	r24, 0x13	; 19
 154:	8b 3b       	cpi	r24, 0xBB	; 187
 156:	31 f4       	brne	.+12     	; 0x164 <keypad+0xd2>
	{	while(PINC==0b10111011);
 158:	83 b3       	in	r24, 0x13	; 19
 15a:	8b 3b       	cpi	r24, 0xBB	; 187
 15c:	e9 f3       	breq	.-6      	; 0x158 <keypad+0xc6>
 15e:	29 e0       	ldi	r18, 0x09	; 9
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	09 c0       	rjmp	.+18     	; 0x176 <keypad+0xe4>
		return 9;
	}
	 else if(PINC==0b01111011)
 164:	83 b3       	in	r24, 0x13	; 19
 166:	8b 37       	cpi	r24, 0x7B	; 123
 168:	09 f0       	breq	.+2      	; 0x16c <keypad+0xda>
 16a:	96 cf       	rjmp	.-212    	; 0x98 <keypad+0x6>
	{	while(PINC==0b01111011);
 16c:	83 b3       	in	r24, 0x13	; 19
 16e:	8b 37       	cpi	r24, 0x7B	; 123
 170:	e9 f3       	breq	.-6      	; 0x16c <keypad+0xda>
 172:	23 e2       	ldi	r18, 0x23	; 35
 174:	30 e0       	ldi	r19, 0x00	; 0
		return '#';
	}
	
}
	
}
 176:	c9 01       	movw	r24, r18
 178:	08 95       	ret

0000017a <main>:


void main()
{
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
	DDRC=0X0F;
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	84 bb       	out	0x14, r24	; 20
	DDRA=0XFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8a bb       	out	0x1a, r24	; 26
	{
	int a=keypad();
	if(a==4)
	{
		
		PORTA=0B00011010;
 18a:	9a e1       	ldi	r25, 0x1A	; 26
 18c:	e9 2e       	mov	r14, r25
	{
		PORTA=0B00010101;
	}
	else if(a==8)
	{
		PORTA=0B00010110;
 18e:	86 e1       	ldi	r24, 0x16	; 22
 190:	f8 2e       	mov	r15, r24
	{
		PORTA=0B00011001;
	}
	else if(a==6)
	{
		PORTA=0B00010101;
 192:	05 e1       	ldi	r16, 0x15	; 21
		
		PORTA=0B00011010;
	}
	else if(a==5)
	{
		PORTA=0B00011001;
 194:	19 e1       	ldi	r17, 0x19	; 25
{
	DDRC=0X0F;
	DDRA=0XFF;
	while(1)
	{
	int a=keypad();
 196:	0e 94 49 00 	call	0x92	; 0x92 <keypad>
	if(a==4)
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <main+0x2a>
	{
		
		PORTA=0B00011010;
 1a0:	eb ba       	out	0x1b, r14	; 27
 1a2:	f9 cf       	rjmp	.-14     	; 0x196 <main+0x1c>
	}
	else if(a==5)
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <main+0x34>
	{
		PORTA=0B00011001;
 1aa:	1b bb       	out	0x1b, r17	; 27
 1ac:	f4 cf       	rjmp	.-24     	; 0x196 <main+0x1c>
	}
	else if(a==6)
 1ae:	86 30       	cpi	r24, 0x06	; 6
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <main+0x3e>
	{
		PORTA=0B00010101;
 1b4:	0b bb       	out	0x1b, r16	; 27
 1b6:	ef cf       	rjmp	.-34     	; 0x196 <main+0x1c>
	}
	else if(a==8)
 1b8:	08 97       	sbiw	r24, 0x08	; 8
 1ba:	69 f7       	brne	.-38     	; 0x196 <main+0x1c>
	{
		PORTA=0B00010110;
 1bc:	fb ba       	out	0x1b, r15	; 27
 1be:	eb cf       	rjmp	.-42     	; 0x196 <main+0x1c>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
