
0-99CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000155  00000000  00000000  000001f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000df  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000186  00000000  00000000  0000042d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d5  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	64 97       	sbiw	r28, 0x14	; 20
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	int i,j,a[10]={64,121,36,48,25,18,2,120,0,16};
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	84 e1       	ldi	r24, 0x14	; 20
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x28>
	DDRC=0XFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFF;
  c6:	81 bb       	out	0x11, r24	; 17
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	db 01       	movw	r26, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	98 ea       	ldi	r25, 0xA8	; 168
  d2:	e9 2e       	mov	r14, r25
  d4:	91 e6       	ldi	r25, 0x61	; 97
  d6:	f9 2e       	mov	r15, r25
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  d8:	04 ed       	ldi	r16, 0xD4	; 212
  da:	10 e3       	ldi	r17, 0x30	; 48
  dc:	9e 01       	movw	r18, r28
  de:	2b 5e       	subi	r18, 0xEB	; 235
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRD=0XFF;
	for(i=0;i<10;i++)
	{
	for(j=0;j<10;j++)
		{
		PORTD=2;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	d8 2e       	mov	r13, r24
		PORTC=a[i];
		_delay_ms(100);
		
		
		PORTD=4;
  e6:	54 e0       	ldi	r21, 0x04	; 4
  e8:	13 c0       	rjmp	.+38     	; 0x110 <main+0x7e>
	DDRD=0XFF;
	for(i=0;i<10;i++)
	{
	for(j=0;j<10;j++)
		{
		PORTD=2;
  ea:	d2 ba       	out	0x12, r13	; 18
		PORTC=a[i];
  ec:	45 bb       	out	0x15, r20	; 21
  ee:	c7 01       	movw	r24, r14
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x5e>
		_delay_ms(100);
		
		
		PORTD=4;
  f4:	52 bb       	out	0x12, r21	; 18
		PORTC=a[j];
  f6:	80 81       	ld	r24, Z
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	c8 01       	movw	r24, r16
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6a>
 100:	32 96       	adiw	r30, 0x02	; 2
	int i,j,a[10]={64,121,36,48,25,18,2,120,0,16};
	DDRC=0XFF;
	DDRD=0XFF;
	for(i=0;i<10;i++)
	{
	for(j=0;j<10;j++)
 102:	2e 17       	cp	r18, r30
 104:	3f 07       	cpc	r19, r31
 106:	89 f7       	brne	.-30     	; 0xea <main+0x58>
 108:	12 96       	adiw	r26, 0x02	; 2
void main()
{
	int i,j,a[10]={64,121,36,48,25,18,2,120,0,16};
	DDRC=0XFF;
	DDRD=0XFF;
	for(i=0;i<10;i++)
 10a:	2a 17       	cp	r18, r26
 10c:	3b 07       	cpc	r19, r27
 10e:	19 f0       	breq	.+6      	; 0x116 <main+0x84>
	{
	for(j=0;j<10;j++)
		{
		PORTD=2;
		PORTC=a[i];
 110:	4c 91       	ld	r20, X
 112:	fb 01       	movw	r30, r22
 114:	ea cf       	rjmp	.-44     	; 0xea <main+0x58>
		
		PORTD=4;
		PORTC=a[j];
		_delay_ms(50);
	}	}
}
 116:	64 96       	adiw	r28, 0x14	; 20
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	df 90       	pop	r13
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
