
RFID+Check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000098  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000040f  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d3  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000048d  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013f  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000186  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  8a:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x28);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	95 bb       	out	0x15, r25	; 21
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<RW);
  9a:	a9 98       	cbi	0x15, 1	; 21
	lcd |= (1<<EN); 
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 ea       	ldi	r18, 0xA8	; 168
  a0:	31 e6       	ldi	r19, 0x61	; 97
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(100);
	lcd &= ~(1<<EN);
  a8:	aa 98       	cbi	0x15, 2	; 21
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	85 bb       	out	0x15, r24	; 21
	lcd &= ~(1<<RS);
  b0:	a8 98       	cbi	0x15, 0	; 21
	lcd &= ~(1<<RW);
  b2:	a9 98       	cbi	0x15, 1	; 21
	lcd |= (1<<EN);
  b4:	aa 9a       	sbi	0x15, 2	; 21
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
  bc:	aa 98       	cbi	0x15, 2	; 21
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x0c);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	95 bb       	out	0x15, r25	; 21
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<RW);
  f2:	a9 98       	cbi	0x15, 1	; 21
	lcd |= (1<<EN);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	28 ea       	ldi	r18, 0xA8	; 168
  f8:	31 e6       	ldi	r19, 0x61	; 97
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 100:	aa 98       	cbi	0x15, 2	; 21
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	85 bb       	out	0x15, r24	; 21
	lcd |= (1<<RS);
 108:	a8 9a       	sbi	0x15, 0	; 21
	lcd &= ~(1<<RW);
 10a:	a9 98       	cbi	0x15, 1	; 21
	lcd |= (1<<EN);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(100);
	lcd &= ~(1<<EN);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	09 e1       	ldi	r16, 0x19	; 25
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	15 c0       	rjmp	.+42     	; 0x152 <lcd_num+0x3a>
	int i=0;
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 86 01 	call	0x30c	; 0x30c <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	97 e2       	ldi	r25, 0x27	; 39
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_num+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <lcd_num+0x24>
		_delay_ms(1000);
		n/=10;
 146:	ce 01       	movw	r24, r28
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 86 01 	call	0x30c	; 0x30c <__udivmodhi4>
 150:	eb 01       	movw	r28, r22


void lcd_num(unsigned int n)
{
	int i=0;
	while(n!=0)
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	49 f7       	brne	.-46     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(1000);
		n/=10;
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <lcd_string>:
	_delay_ms(100);
	lcd &= ~(1<<EN);
}

void lcd_string(char *ser)            
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 168:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 16c:	89 91       	ld	r24, Y+
 16e:	88 23       	and	r24, r24
 170:	d9 f7       	brne	.-10     	; 0x168 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <usart_initialize>:
#include<util/delay.h>
#include<avr/lcd.h>
#define F_CPU 8000000UL

void usart_initialize()
{
 178:	10 bc       	out	0x20, r1	; 32
	UBRRH=0;
	UBRRL=51;
 17a:	83 e3       	ldi	r24, 0x33	; 51
 17c:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
 182:	86 e8       	ldi	r24, 0x86	; 134
 184:	80 bd       	out	0x20, r24	; 32
}
 186:	08 95       	ret

00000188 <usart_send>:
void usart_send(char data)
{
 188:	5d 9b       	sbis	0x0b, 5	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <usart_send>
	while((UCSRA&0x20)==0);
	UDR=data;
 18c:	8c b9       	out	0x0c, r24	; 12
}
 18e:	08 95       	ret

00000190 <usart_receive>:
char usart_receive()
{
 190:	5f 9b       	sbis	0x0b, 7	; 11
 192:	fe cf       	rjmp	.-4      	; 0x190 <usart_receive>
	while((UCSRA&0X80)==0);
	return UDR;
 194:	8c b1       	in	r24, 0x0c	; 12
}
 196:	08 95       	ret

00000198 <main>:
void main()
{  int i;
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	a4 97       	sbiw	r28, 0x24	; 36
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
	char a[12];
		char c[12]={'1','8','0','0','8','9','2','3','B','2','0','0'};
 1bc:	de 01       	movw	r26, r28
 1be:	1d 96       	adiw	r26, 0x0d	; 13
 1c0:	ee e8       	ldi	r30, 0x8E	; 142
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	01 90       	ld	r0, Z+
 1c8:	0d 92       	st	X+, r0
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x2e>
		char d[12]={'0','D','0','0','7','6','C','C','A','8','1','F'};
 1ce:	de 01       	movw	r26, r28
 1d0:	59 96       	adiw	r26, 0x19	; 25
 1d2:	e2 e8       	ldi	r30, 0x82	; 130
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x40>
	DDRC=0XFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20

	lcd_initialize();
 1e4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
#include<avr/lcd.h>
#define F_CPU 8000000UL

void usart_initialize()
{
	UBRRH=0;
 1e8:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	89 b9       	out	0x09, r24	; 9
	UCSRB=0X18;
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0X86;
 1f2:	86 e8       	ldi	r24, 0x86	; 134
 1f4:	80 bd       	out	0x20, r24	; 32
		char d[12]={'0','D','0','0','7','6','C','C','A','8','1','F'};
	DDRC=0XFF;

	lcd_initialize();
	usart_initialize();
	lcd_cmd(0x80);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_string("Swipe your card");
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_string>
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	29 e1       	ldi	r18, 0x19	; 25
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 212:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 214:	d9 f7       	brne	.-10     	; 0x20c <main+0x74>
	_delay_ms(10000);
	lcd_cmd(0x01);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
		int count=0;
		int coun=0;

		for(i=0;i<12;i++)
	{
		a[i]=usart_receive();
 220:	8e 01       	movw	r16, r28
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
		for(i=0;i<12;i++)
		{if(a[i]==c[i])
 226:	4d e0       	ldi	r20, 0x0D	; 13
 228:	a4 2e       	mov	r10, r20
 22a:	b1 2c       	mov	r11, r1
 22c:	ac 0e       	add	r10, r28
 22e:	bd 1e       	adc	r11, r29
			count++;	}

		for(i=0;i<12;i++)
			{if(a[i]==d[i])
 230:	99 e1       	ldi	r25, 0x19	; 25
 232:	c9 2e       	mov	r12, r25
 234:	d1 2c       	mov	r13, r1
 236:	cc 0e       	add	r12, r28
 238:	dd 1e       	adc	r13, r29
 23a:	88 ea       	ldi	r24, 0xA8	; 168
 23c:	e8 2e       	mov	r14, r24
 23e:	81 e6       	ldi	r24, 0x61	; 97
 240:	f8 2e       	mov	r15, r24
 242:	09 c0       	rjmp	.+18     	; 0x256 <main+0xbe>
	while((UCSRA&0x20)==0);
	UDR=data;
}
char usart_receive()
{
	while((UCSRA&0X80)==0);
 244:	5f 9b       	sbis	0x0b, 7	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <main+0xac>
	return UDR;
 248:	8c b1       	in	r24, 0x0c	; 12
		int count=0;
		int coun=0;

		for(i=0;i<12;i++)
	{
		a[i]=usart_receive();
 24a:	f8 01       	movw	r30, r16
 24c:	e2 0f       	add	r30, r18
 24e:	f3 1f       	adc	r31, r19
 250:	80 83       	st	Z, r24
	while(1)
	{	
		int count=0;
		int coun=0;

		for(i=0;i<12;i++)
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	2c 30       	cpi	r18, 0x0C	; 12
 258:	31 05       	cpc	r19, r1
 25a:	a4 f3       	brlt	.-24     	; 0x244 <main+0xac>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
	{
		a[i]=usart_receive();
	}
	
		for(i=0;i<12;i++)
		{if(a[i]==c[i])
 264:	f8 01       	movw	r30, r16
 266:	e2 0f       	add	r30, r18
 268:	f3 1f       	adc	r31, r19
 26a:	d5 01       	movw	r26, r10
 26c:	a2 0f       	add	r26, r18
 26e:	b3 1f       	adc	r27, r19
 270:	90 81       	ld	r25, Z
 272:	8c 91       	ld	r24, X
 274:	98 17       	cp	r25, r24
 276:	11 f4       	brne	.+4      	; 0x27c <main+0xe4>
			count++;	}
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
		for(i=0;i<12;i++)
	{
		a[i]=usart_receive();
	}
	
		for(i=0;i<12;i++)
 27c:	2f 5f       	subi	r18, 0xFF	; 255
 27e:	3f 4f       	sbci	r19, 0xFF	; 255
 280:	2c 30       	cpi	r18, 0x0C	; 12
 282:	31 05       	cpc	r19, r1
 284:	79 f7       	brne	.-34     	; 0x264 <main+0xcc>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
		{if(a[i]==c[i])
			count++;	}

		for(i=0;i<12;i++)
			{if(a[i]==d[i])
 28e:	f8 01       	movw	r30, r16
 290:	e2 0f       	add	r30, r18
 292:	f3 1f       	adc	r31, r19
 294:	d6 01       	movw	r26, r12
 296:	a2 0f       	add	r26, r18
 298:	b3 1f       	adc	r27, r19
 29a:	90 81       	ld	r25, Z
 29c:	8c 91       	ld	r24, X
 29e:	98 17       	cp	r25, r24
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <main+0x10e>
			coun++;	}
 2a2:	4f 5f       	subi	r20, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
	
		for(i=0;i<12;i++)
		{if(a[i]==c[i])
			count++;	}

		for(i=0;i<12;i++)
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	2c 30       	cpi	r18, 0x0C	; 12
 2ac:	31 05       	cpc	r19, r1
 2ae:	79 f7       	brne	.-34     	; 0x28e <main+0xf6>
			{if(a[i]==d[i])
			coun++;	}
	
	 if(count==12||coun==12)
 2b0:	6c 30       	cpi	r22, 0x0C	; 12
 2b2:	71 05       	cpc	r23, r1
 2b4:	19 f0       	breq	.+6      	; 0x2bc <main+0x124>
 2b6:	4c 30       	cpi	r20, 0x0C	; 12
 2b8:	51 05       	cpc	r21, r1
 2ba:	c1 f4       	brne	.+48     	; 0x2ec <main+0x154>
	{
			lcd_cmd(0x82);
 2bc:	82 e8       	ldi	r24, 0x82	; 130
 2be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_string("Welcome");
 2c2:	80 e7       	ldi	r24, 0x70	; 112
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_string>
		_delay_ms(100);
		lcd_cmd(0x01);
		
	}
	}
	}
 2ca:	a4 96       	adiw	r28, 0x24	; 36
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	08 95       	ret
		break;
		
	}
	else 
	{
		lcd_cmd(0x82);
 2ec:	82 e8       	ldi	r24, 0x82	; 130
 2ee:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_string("Try again");
 2f2:	88 e7       	ldi	r24, 0x78	; 120
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_string>
 2fa:	c7 01       	movw	r24, r14
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x164>
		_delay_ms(100);
		lcd_cmd(0x01);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	a5 cf       	rjmp	.-182    	; 0x256 <main+0xbe>

0000030c <__udivmodhi4>:
 30c:	aa 1b       	sub	r26, r26
 30e:	bb 1b       	sub	r27, r27
 310:	51 e1       	ldi	r21, 0x11	; 17
 312:	07 c0       	rjmp	.+14     	; 0x322 <__udivmodhi4_ep>

00000314 <__udivmodhi4_loop>:
 314:	aa 1f       	adc	r26, r26
 316:	bb 1f       	adc	r27, r27
 318:	a6 17       	cp	r26, r22
 31a:	b7 07       	cpc	r27, r23
 31c:	10 f0       	brcs	.+4      	; 0x322 <__udivmodhi4_ep>
 31e:	a6 1b       	sub	r26, r22
 320:	b7 0b       	sbc	r27, r23

00000322 <__udivmodhi4_ep>:
 322:	88 1f       	adc	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	5a 95       	dec	r21
 328:	a9 f7       	brne	.-22     	; 0x314 <__udivmodhi4_loop>
 32a:	80 95       	com	r24
 32c:	90 95       	com	r25
 32e:	bc 01       	movw	r22, r24
 330:	cd 01       	movw	r24, r26
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
