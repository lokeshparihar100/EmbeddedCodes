
S+L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000034a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006d3  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018e  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000500  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000112  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ee  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  8a:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	94 60       	ori	r25, 0x04	; 4
  98:	92 bb       	out	0x12, r25	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	24 ec       	ldi	r18, 0xC4	; 196
  9c:	39 e0       	ldi	r19, 0x09	; 9
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0xe>
	PORTD=(cmd&0xf0)|0x04;
	_delay_ms(10);
	PORTD=PORTD-0x04;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	94 50       	subi	r25, 0x04	; 4
  a8:	92 bb       	out	0x12, r25	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_cmd+0x22>
	_delay_ms(10);
	PORTD=PORTD-0x04;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	84 50       	subi	r24, 0x04	; 4
  bc:	82 bb       	out	0x12, r24	; 18
}
  be:	08 95       	ret

000000c0 <lcd_ini>:
#include<avr/io.h>
#include<util/delay.h>
#define F_CPU 8000000UL

void lcd_ini()                        // Initialize LCD
{
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x02);
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0C);
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
}
  e8:	08 95       	ret

000000ea <lcd_data>:
	PORTD=((cmd<<4)&0xf0)|0x04;
	_delay_ms(10);
	PORTD=PORTD-0x04;
}
void lcd_data(char data)             // Send data to data registor
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	95 60       	ori	r25, 0x05	; 5
  f0:	92 bb       	out	0x12, r25	; 18
  f2:	24 ec       	ldi	r18, 0xC4	; 196
  f4:	39 e0       	ldi	r19, 0x09	; 9
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0xe>
	PORTD=(data&0xf0)|0x05;
	_delay_ms(10);
	PORTD=PORTD-0x04;
  fc:	92 b3       	in	r25, 0x12	; 18
  fe:	94 50       	subi	r25, 0x04	; 4
 100:	92 bb       	out	0x12, r25	; 18
	PORTD=((data<<4)&0xf0)|0x05;
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	85 60       	ori	r24, 0x05	; 5
 108:	82 bb       	out	0x12, r24	; 18
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x22>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	84 50       	subi	r24, 0x04	; 4
 114:	82 bb       	out	0x12, r24	; 18
}
 116:	08 95       	ret

00000118 <lcd_str>:
void lcd_str(char *ser)             // String Function
{
 118:	fc 01       	movw	r30, r24
 11a:	44 ec       	ldi	r20, 0xC4	; 196
 11c:	59 e0       	ldi	r21, 0x09	; 9
 11e:	14 c0       	rjmp	.+40     	; 0x148 <lcd_str+0x30>
	_delay_ms(10);
	PORTD=PORTD-0x04;
}
void lcd_data(char data)             // Send data to data registor
{
	PORTD=(data&0xf0)|0x05;
 120:	82 2f       	mov	r24, r18
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	85 60       	ori	r24, 0x05	; 5
 126:	82 bb       	out	0x12, r24	; 18
 128:	ca 01       	movw	r24, r20
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_str+0x12>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	84 50       	subi	r24, 0x04	; 4
 132:	82 bb       	out	0x12, r24	; 18
	PORTD=((data<<4)&0xf0)|0x05;
 134:	22 95       	swap	r18
 136:	20 7f       	andi	r18, 0xF0	; 240
 138:	25 60       	ori	r18, 0x05	; 5
 13a:	22 bb       	out	0x12, r18	; 18
 13c:	ca 01       	movw	r24, r20
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_str+0x26>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	84 50       	subi	r24, 0x04	; 4
 146:	82 bb       	out	0x12, r24	; 18
}
void lcd_str(char *ser)             // String Function
{
	int i=0;
	while(ser[i]!='\0')
 148:	21 91       	ld	r18, Z+
 14a:	22 23       	and	r18, r18
 14c:	49 f7       	brne	.-46     	; 0x120 <lcd_str+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}
}
 14e:	08 95       	ret

00000150 <keypad>:
int keypad()                         // Function for Keypad
{
 150:	3e ef       	ldi	r19, 0xFE	; 254
	{	while(PINC==0b01111110);
		return '*';
	}


PORTC=0b11111101;
 152:	2d ef       	ldi	r18, 0xFD	; 253
	{	while(PINC==0b01111101);
		return 0;
	}


PORTC=0b11111011;
 154:	9b ef       	ldi	r25, 0xFB	; 251
int keypad()                         // Function for Keypad
{
	while(1)
	{
		
PORTC=0b11111110;
 156:	35 bb       	out	0x15, r19	; 21

	if(PINC==0b11101110)
 158:	83 b3       	in	r24, 0x13	; 19
 15a:	8e 3e       	cpi	r24, 0xEE	; 238
 15c:	31 f4       	brne	.+12     	; 0x16a <keypad+0x1a>
	{  while(PINC==0b11101110);
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	8e 3e       	cpi	r24, 0xEE	; 238
 162:	e9 f3       	breq	.-6      	; 0x15e <keypad+0xe>
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	65 c0       	rjmp	.+202    	; 0x234 <keypad+0xe4>
		return 1;
	}
	 else if(PINC==0b11011110)
 16a:	83 b3       	in	r24, 0x13	; 19
 16c:	8e 3d       	cpi	r24, 0xDE	; 222
 16e:	31 f4       	brne	.+12     	; 0x17c <keypad+0x2c>
	{	while(PINC==0b11011110);
 170:	83 b3       	in	r24, 0x13	; 19
 172:	8e 3d       	cpi	r24, 0xDE	; 222
 174:	e9 f3       	breq	.-6      	; 0x170 <keypad+0x20>
 176:	24 e0       	ldi	r18, 0x04	; 4
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	5c c0       	rjmp	.+184    	; 0x234 <keypad+0xe4>
		return 4;
	}
	else if(PINC==0b10111110)
 17c:	83 b3       	in	r24, 0x13	; 19
 17e:	8e 3b       	cpi	r24, 0xBE	; 190
 180:	31 f4       	brne	.+12     	; 0x18e <keypad+0x3e>
	{	while(PINC==0b10111110);
 182:	83 b3       	in	r24, 0x13	; 19
 184:	8e 3b       	cpi	r24, 0xBE	; 190
 186:	e9 f3       	breq	.-6      	; 0x182 <keypad+0x32>
 188:	27 e0       	ldi	r18, 0x07	; 7
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	53 c0       	rjmp	.+166    	; 0x234 <keypad+0xe4>
		return 7;
	}
	 else if(PINC==0b01111110)
 18e:	83 b3       	in	r24, 0x13	; 19
 190:	8e 37       	cpi	r24, 0x7E	; 126
 192:	31 f4       	brne	.+12     	; 0x1a0 <keypad+0x50>
	{	while(PINC==0b01111110);
 194:	83 b3       	in	r24, 0x13	; 19
 196:	8e 37       	cpi	r24, 0x7E	; 126
 198:	e9 f3       	breq	.-6      	; 0x194 <keypad+0x44>
 19a:	2a e2       	ldi	r18, 0x2A	; 42
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	4a c0       	rjmp	.+148    	; 0x234 <keypad+0xe4>
		return '*';
	}


PORTC=0b11111101;
 1a0:	25 bb       	out	0x15, r18	; 21

	if(PINC==0b11101101)
 1a2:	83 b3       	in	r24, 0x13	; 19
 1a4:	8d 3e       	cpi	r24, 0xED	; 237
 1a6:	31 f4       	brne	.+12     	; 0x1b4 <keypad+0x64>
	{	while(PINC==0b11101101);
 1a8:	83 b3       	in	r24, 0x13	; 19
 1aa:	8d 3e       	cpi	r24, 0xED	; 237
 1ac:	e9 f3       	breq	.-6      	; 0x1a8 <keypad+0x58>
 1ae:	22 e0       	ldi	r18, 0x02	; 2
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 c0       	rjmp	.+128    	; 0x234 <keypad+0xe4>
		return 2;
	}
	 else if(PINC==0b11011101)
 1b4:	83 b3       	in	r24, 0x13	; 19
 1b6:	8d 3d       	cpi	r24, 0xDD	; 221
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <keypad+0x76>
	{	while(PINC==0b11011101);
 1ba:	83 b3       	in	r24, 0x13	; 19
 1bc:	8d 3d       	cpi	r24, 0xDD	; 221
 1be:	e9 f3       	breq	.-6      	; 0x1ba <keypad+0x6a>
 1c0:	25 e0       	ldi	r18, 0x05	; 5
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <keypad+0xe4>
		return 5;
	}
	else if(PINC==0b10111101)
 1c6:	83 b3       	in	r24, 0x13	; 19
 1c8:	8d 3b       	cpi	r24, 0xBD	; 189
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <keypad+0x88>
	{	while(PINC==0b10111101);
 1cc:	83 b3       	in	r24, 0x13	; 19
 1ce:	8d 3b       	cpi	r24, 0xBD	; 189
 1d0:	e9 f3       	breq	.-6      	; 0x1cc <keypad+0x7c>
 1d2:	28 e0       	ldi	r18, 0x08	; 8
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	2e c0       	rjmp	.+92     	; 0x234 <keypad+0xe4>
		return 8;
	}
	 else if(PINC==0b01111101)
 1d8:	83 b3       	in	r24, 0x13	; 19
 1da:	8d 37       	cpi	r24, 0x7D	; 125
 1dc:	31 f4       	brne	.+12     	; 0x1ea <keypad+0x9a>
	{	while(PINC==0b01111101);
 1de:	83 b3       	in	r24, 0x13	; 19
 1e0:	8d 37       	cpi	r24, 0x7D	; 125
 1e2:	e9 f3       	breq	.-6      	; 0x1de <keypad+0x8e>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <keypad+0xe4>
		return 0;
	}


PORTC=0b11111011;
 1ea:	95 bb       	out	0x15, r25	; 21

	if(PINC==0b11101011)
 1ec:	83 b3       	in	r24, 0x13	; 19
 1ee:	8b 3e       	cpi	r24, 0xEB	; 235
 1f0:	31 f4       	brne	.+12     	; 0x1fe <keypad+0xae>
	{	while(PINC==0b11101011);
 1f2:	83 b3       	in	r24, 0x13	; 19
 1f4:	8b 3e       	cpi	r24, 0xEB	; 235
 1f6:	e9 f3       	breq	.-6      	; 0x1f2 <keypad+0xa2>
 1f8:	23 e0       	ldi	r18, 0x03	; 3
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <keypad+0xe4>
		return 3;
	}
	 else if(PINC==0b11011011)
 1fe:	83 b3       	in	r24, 0x13	; 19
 200:	8b 3d       	cpi	r24, 0xDB	; 219
 202:	31 f4       	brne	.+12     	; 0x210 <keypad+0xc0>
	{	while(PINC==0b11011011);
 204:	83 b3       	in	r24, 0x13	; 19
 206:	8b 3d       	cpi	r24, 0xDB	; 219
 208:	e9 f3       	breq	.-6      	; 0x204 <keypad+0xb4>
 20a:	26 e0       	ldi	r18, 0x06	; 6
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	12 c0       	rjmp	.+36     	; 0x234 <keypad+0xe4>
		return 6;
	}
	else if(PINC==0b10111011)
 210:	83 b3       	in	r24, 0x13	; 19
 212:	8b 3b       	cpi	r24, 0xBB	; 187
 214:	31 f4       	brne	.+12     	; 0x222 <keypad+0xd2>
	{	while(PINC==0b10111011);
 216:	83 b3       	in	r24, 0x13	; 19
 218:	8b 3b       	cpi	r24, 0xBB	; 187
 21a:	e9 f3       	breq	.-6      	; 0x216 <keypad+0xc6>
 21c:	29 e0       	ldi	r18, 0x09	; 9
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	09 c0       	rjmp	.+18     	; 0x234 <keypad+0xe4>
		return 9;
	}
	 else if(PINC==0b01111011)
 222:	83 b3       	in	r24, 0x13	; 19
 224:	8b 37       	cpi	r24, 0x7B	; 123
 226:	09 f0       	breq	.+2      	; 0x22a <keypad+0xda>
 228:	96 cf       	rjmp	.-212    	; 0x156 <keypad+0x6>
	{	while(PINC==0b01111011);
 22a:	83 b3       	in	r24, 0x13	; 19
 22c:	8b 37       	cpi	r24, 0x7B	; 123
 22e:	e9 f3       	breq	.-6      	; 0x22a <keypad+0xda>
 230:	23 e2       	ldi	r18, 0x23	; 35
 232:	30 e0       	ldi	r19, 0x00	; 0
		return '#';
	}
	
}
	
}
 234:	c9 01       	movw	r24, r18
 236:	08 95       	ret

00000238 <main>:

void main()
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
	int a,b,c,d,p;
	DDRD=0xFF;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	81 bb       	out	0x11, r24	; 17
	DDRC=0X0F;
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	84 bb       	out	0x14, r24	; 20
	
	lcd_ini();
 244:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_ini>
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
	PORTD=(cmd&0xf0)|0x04;
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	82 bb       	out	0x12, r24	; 18
 24c:	24 ec       	ldi	r18, 0xC4	; 196
 24e:	39 e0       	ldi	r19, 0x09	; 9
 250:	c9 01       	movw	r24, r18
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x1a>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 256:	82 b3       	in	r24, 0x12	; 18
 258:	84 50       	subi	r24, 0x04	; 4
 25a:	82 bb       	out	0x12, r24	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
 25c:	84 e4       	ldi	r24, 0x44	; 68
 25e:	82 bb       	out	0x12, r24	; 18
 260:	c9 01       	movw	r24, r18
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0x2a>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 266:	82 b3       	in	r24, 0x12	; 18
 268:	84 50       	subi	r24, 0x04	; 4
 26a:	82 bb       	out	0x12, r24	; 18
	DDRD=0xFF;
	DDRC=0X0F;
	
	lcd_ini();
	lcd_cmd(0x84);
	lcd_str("WELCOME");
 26c:	80 e6       	ldi	r24, 0x60	; 96
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_str>
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	97 e2       	ldi	r25, 0x27	; 39
 278:	29 e1       	ldi	r18, 0x19	; 25
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0x44>
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
	PORTD=(cmd&0xf0)|0x04;
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	82 bb       	out	0x12, r24	; 18
 28a:	04 ec       	ldi	r16, 0xC4	; 196
 28c:	19 e0       	ldi	r17, 0x09	; 9
 28e:	c8 01       	movw	r24, r16
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x58>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 294:	82 b3       	in	r24, 0x12	; 18
 296:	84 50       	subi	r24, 0x04	; 4
 298:	82 bb       	out	0x12, r24	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
 29a:	84 e1       	ldi	r24, 0x14	; 20
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	c8 01       	movw	r24, r16
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x68>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	84 50       	subi	r24, 0x04	; 4
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	8a ef       	ldi	r24, 0xFA	; 250
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x76>
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
	PORTD=(cmd&0xf0)|0x04;
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	82 bb       	out	0x12, r24	; 18
 2b6:	c8 01       	movw	r24, r16
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x80>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	84 50       	subi	r24, 0x04	; 4
 2c0:	82 bb       	out	0x12, r24	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
 2c2:	84 e2       	ldi	r24, 0x24	; 36
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	c8 01       	movw	r24, r16
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x90>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 2cc:	82 b3       	in	r24, 0x12	; 18
 2ce:	84 50       	subi	r24, 0x04	; 4
 2d0:	82 bb       	out	0x12, r24	; 18
	_delay_ms(1000);
	lcd_cmd(0x01);
	_delay_ms(1);

	lcd_cmd(0x82);
	lcd_str("Please Enter");
 2d2:	88 e6       	ldi	r24, 0x68	; 104
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_str>
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
	PORTD=(cmd&0xf0)|0x04;
 2da:	84 ec       	ldi	r24, 0xC4	; 196
 2dc:	82 bb       	out	0x12, r24	; 18
 2de:	c8 01       	movw	r24, r16
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0xa8>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 2e4:	82 b3       	in	r24, 0x12	; 18
 2e6:	84 50       	subi	r24, 0x04	; 4
 2e8:	82 bb       	out	0x12, r24	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
 2ea:	84 e4       	ldi	r24, 0x44	; 68
 2ec:	82 bb       	out	0x12, r24	; 18
 2ee:	c8 01       	movw	r24, r16
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0xb8>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 2f4:	82 b3       	in	r24, 0x12	; 18
 2f6:	84 50       	subi	r24, 0x04	; 4
 2f8:	82 bb       	out	0x12, r24	; 18
	_delay_ms(1);

	lcd_cmd(0x82);
	lcd_str("Please Enter");
	lcd_cmd(0xc4);
	lcd_str("Your Pin");
 2fa:	85 e7       	ldi	r24, 0x75	; 117
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_str>
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	29 e1       	ldi	r18, 0x19	; 25
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 310:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 312:	d9 f7       	brne	.-10     	; 0x30a <main+0xd2>
	lcd_cmd(0x0C);
	lcd_cmd(0x01);
}
void lcd_cmd(char cmd)              // Send Instruction to instruction registor
{
	PORTD=(cmd&0xf0)|0x04;
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	82 bb       	out	0x12, r24	; 18
 318:	24 ec       	ldi	r18, 0xC4	; 196
 31a:	39 e0       	ldi	r19, 0x09	; 9
 31c:	c9 01       	movw	r24, r18
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0xe6>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 322:	82 b3       	in	r24, 0x12	; 18
 324:	84 50       	subi	r24, 0x04	; 4
 326:	82 bb       	out	0x12, r24	; 18
	PORTD=((cmd<<4)&0xf0)|0x04;
 328:	84 e1       	ldi	r24, 0x14	; 20
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	c9 01       	movw	r24, r18
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0xf6>
	_delay_ms(10);
	PORTD=PORTD-0x04;
 332:	82 b3       	in	r24, 0x12	; 18
 334:	84 50       	subi	r24, 0x04	; 4
 336:	82 bb       	out	0x12, r24	; 18
 338:	8a ef       	ldi	r24, 0xFA	; 250
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x104>
			_delay_ms(2000);
			lcd_cmd(0x01);
			_delay_ms(1);
			goto jump;                              //Jump statment
		}*/
}
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
