
MasterToSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000228  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008d  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000046b  00000000  00000000  00000351  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a0  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000415  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000135  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000011e  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	92 bb       	out	0x12, r25	; 18
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  9a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN); 
  9c:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(10);
	lcd &= ~(1<<EN);
  a8:	92 98       	cbi	0x12, 2	; 18
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	82 bb       	out	0x12, r24	; 18
	lcd &= ~(1<<RS);
  b0:	90 98       	cbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  b2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  b4:	92 9a       	sbi	0x12, 2	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
  bc:	92 98       	cbi	0x12, 2	; 18
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0c);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	92 bb       	out	0x12, r25	; 18
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
  f2:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
  f4:	92 9a       	sbi	0x12, 2	; 18
  f6:	24 ec       	ldi	r18, 0xC4	; 196
  f8:	39 e0       	ldi	r19, 0x09	; 9
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 100:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	82 bb       	out	0x12, r24	; 18
	lcd |= (1<<RS);
 108:	90 9a       	sbi	0x12, 0	; 18
	lcd &= ~(1<<RW);
 10a:	91 98       	cbi	0x12, 1	; 18
	lcd |= (1<<EN);
 10c:	92 9a       	sbi	0x12, 2	; 18
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 114:	92 98       	cbi	0x12, 2	; 18
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	08 ea       	ldi	r16, 0xA8	; 168
 124:	11 e6       	ldi	r17, 0x61	; 97
 126:	11 c0       	rjmp	.+34     	; 0x14a <lcd_num+0x32>
	int i=0;
	
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	c8 01       	movw	r24, r16
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_num+0x22>
		_delay_ms(100);
		n/=10;
 13e:	ce 01       	movw	r24, r28
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodhi4>
 148:	eb 01       	movw	r28, r22

void lcd_num(unsigned int n)
{
	int i=0;
	
	while(n!=0)
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	69 f7       	brne	.-38     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(100);
		n/=10;
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <lcd_string>:
	_delay_ms(10);
	lcd &= ~(1<<EN);
}

void lcd_string(char *ser)            
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 160:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 164:	89 91       	ld	r24, Y+
 166:	88 23       	and	r24, r24
 168:	d9 f7       	brne	.-10     	; 0x160 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <master_ini>:
#include<avr/lcd.h>
#include<avr/interrupt.h>
#include<util/delay.h>

void master_ini()
{
 170:	80 eb       	ldi	r24, 0xB0	; 176
 172:	87 bb       	out	0x17, r24	; 23
	DDRB=(1<<PB4)|(1<<PB5)|(1<<PB7);
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
 174:	82 e5       	ldi	r24, 0x52	; 82
 176:	8d b9       	out	0x0d, r24	; 13
}
 178:	08 95       	ret

0000017a <master_tx>:
void master_tx(char data)
{
 17a:	8f b9       	out	0x0f, r24	; 15
	SPDR=data;
	while(!(SPSR & (1<<SPIF)));
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <master_tx+0x2>
}
 180:	08 95       	ret

00000182 <master_rx>:
char master_rx()
{
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	8f b9       	out	0x0f, r24	; 15
	SPDR=0XFF;
	while(!(SPSR & (1<<SPIF)));
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <master_rx+0x4>
	return SPDR;
 18a:	8f b1       	in	r24, 0x0f	; 15
}
 18c:	08 95       	ret

0000018e <main>:

void main()
{
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	29 e1       	ldi	r18, 0x19	; 25
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <main+0x8>
	_delay_ms(2000);
	DDRD=0XFF;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	81 bb       	out	0x11, r24	; 17
	
	lcd_initialize();
 1a4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
	lcd_cmd(0x80);
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_string("lokesh");
 1ae:	80 e6       	ldi	r24, 0x60	; 96
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_string>
#include<avr/interrupt.h>
#include<util/delay.h>

void master_ini()
{
	DDRB=(1<<PB4)|(1<<PB5)|(1<<PB7);
 1b6:	80 eb       	ldi	r24, 0xB0	; 176
 1b8:	87 bb       	out	0x17, r24	; 23
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
 1ba:	82 e5       	ldi	r24, 0x52	; 82
 1bc:	8d b9       	out	0x0d, r24	; 13
 1be:	84 ec       	ldi	r24, 0xC4	; 196
 1c0:	99 e0       	ldi	r25, 0x09	; 9
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x34>
	lcd_string("lokesh");

	master_ini();
	_delay_ms(10);
	
	PORTB=(1<<PB4);
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	97 e2       	ldi	r25, 0x27	; 39
 1ce:	29 e1       	ldi	r18, 0x19	; 25
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <main+0x44>
	_delay_ms(1000);
	PORTB= PORTB&0B11101111;
 1dc:	c4 98       	cbi	0x18, 4	; 24
 1de:	84 ec       	ldi	r24, 0xC4	; 196
 1e0:	99 e0       	ldi	r25, 0x09	; 9
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x54>
	DDRB=(1<<PB4)|(1<<PB5)|(1<<PB7);
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
}
void master_tx(char data)
{
	SPDR=data;
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1ea:	77 9b       	sbis	0x0e, 7	; 14
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <main+0x5c>
 1ee:	88 ea       	ldi	r24, 0xA8	; 168
 1f0:	91 e6       	ldi	r25, 0x61	; 97
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x64>
	_delay_ms(10);
	
	master_tx(14);
	_delay_ms(100);

	PORTB=(1<<PB4);
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	88 bb       	out	0x18, r24	; 24
}
 1fa:	08 95       	ret

000001fc <__udivmodhi4>:
 1fc:	aa 1b       	sub	r26, r26
 1fe:	bb 1b       	sub	r27, r27
 200:	51 e1       	ldi	r21, 0x11	; 17
 202:	07 c0       	rjmp	.+14     	; 0x212 <__udivmodhi4_ep>

00000204 <__udivmodhi4_loop>:
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	a6 17       	cp	r26, r22
 20a:	b7 07       	cpc	r27, r23
 20c:	10 f0       	brcs	.+4      	; 0x212 <__udivmodhi4_ep>
 20e:	a6 1b       	sub	r26, r22
 210:	b7 0b       	sbc	r27, r23

00000212 <__udivmodhi4_ep>:
 212:	88 1f       	adc	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	5a 95       	dec	r21
 218:	a9 f7       	brne	.-22     	; 0x204 <__udivmodhi4_loop>
 21a:	80 95       	com	r24
 21c:	90 95       	com	r25
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
