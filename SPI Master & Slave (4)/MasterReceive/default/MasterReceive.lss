
MasterReceive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008d  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000363  00000000  00000000  00000325  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000181  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003ae  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014c  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b9  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);

}
void lcd_cmd(char cmd)
{
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	98 bb       	out	0x18, r25	; 24
	lcd=(cmd&0XF0);
	lcd &= ~(1<<RS);
  98:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  9a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN); 
  9c:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x12>

	_delay_ms(10);
	lcd &= ~(1<<EN);
  a8:	c2 98       	cbi	0x18, 2	; 24
	

	lcd=(cmd<<4);
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	88 bb       	out	0x18, r24	; 24
	lcd &= ~(1<<RS);
  b0:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  b2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_cmd+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
  bc:	c2 98       	cbi	0x18, 2	; 24
	
}
  be:	08 95       	ret

000000c0 <lcd_initialize>:
		n/=10;
	}
}

void lcd_initialize()
{	
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
	lcd_cmd(0x02);
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0c);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>

}
  e8:	08 95       	ret

000000ea <lcd_data>:
	lcd &= ~(1<<EN);
	
}

void lcd_data(char data)
{
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	98 bb       	out	0x18, r25	; 24
	lcd=(data&0xF0);
	lcd |= (1<<RS);
  f0:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
  f2:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	24 ec       	ldi	r18, 0xC4	; 196
  f8:	39 e0       	ldi	r19, 0x09	; 9
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x12>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 100:	c2 98       	cbi	0x18, 2	; 24
	
	lcd=(data<<4);
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	88 bb       	out	0x18, r24	; 24
	lcd |= (1<<RS);
 108:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<RW);
 10a:	c1 98       	cbi	0x18, 1	; 24
	lcd |= (1<<EN);
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x26>
	_delay_ms(10);
	lcd &= ~(1<<EN);
 114:	c2 98       	cbi	0x18, 2	; 24
}
 116:	08 95       	ret

00000118 <lcd_num>:
#define EN 2



void lcd_num(unsigned int n)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	08 ea       	ldi	r16, 0xA8	; 168
 124:	11 e6       	ldi	r17, 0x61	; 97
 126:	11 c0       	rjmp	.+34     	; 0x14a <lcd_num+0x32>
	int i=0;
	
	while(n!=0)
	{
		i=n%10;
		lcd_data(48+i);
 128:	ce 01       	movw	r24, r28
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__udivmodhi4>
 132:	c0 96       	adiw	r24, 0x30	; 48
 134:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 138:	c8 01       	movw	r24, r16
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_num+0x22>
		_delay_ms(100);
		n/=10;
 13e:	ce 01       	movw	r24, r28
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__udivmodhi4>
 148:	eb 01       	movw	r28, r22

void lcd_num(unsigned int n)
{
	int i=0;
	
	while(n!=0)
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	69 f7       	brne	.-38     	; 0x128 <lcd_num+0x10>
		i=n%10;
		lcd_data(48+i);
		_delay_ms(100);
		n/=10;
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <lcd_string>:
	_delay_ms(10);
	lcd &= ~(1<<EN);
}

void lcd_string(char *ser)            
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <lcd_string+0xc>
	int i=0;
	while(ser[i]!='\0')
	{
		lcd_data(ser[i]);
 160:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

void lcd_string(char *ser)            
{
	int i=0;
	while(ser[i]!='\0')
 164:	89 91       	ld	r24, Y+
 166:	88 23       	and	r24, r24
 168:	d9 f7       	brne	.-10     	; 0x160 <lcd_string+0x8>
	{
		lcd_data(ser[i]);
		i++;
	}

}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <master_ini>:
#include<avr/lcd.h>
#include<avr/interrupt.h>
#include<util/delay.h>

void master_ini()
{
 170:	80 eb       	ldi	r24, 0xB0	; 176
 172:	87 bb       	out	0x17, r24	; 23
	DDRB=(1<<PB4)|(1<<PB5)|(1<<PB7);
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
 174:	82 e5       	ldi	r24, 0x52	; 82
 176:	8d b9       	out	0x0d, r24	; 13
}
 178:	08 95       	ret

0000017a <master_tx>:
void master_tx(char data)
{
 17a:	8f b9       	out	0x0f, r24	; 15
	SPDR=data;
	while(!(SPSR & (1<<SPIF)));
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <master_tx+0x2>
}
 180:	08 95       	ret

00000182 <master_rx>:
char master_rx()
{
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	8f b9       	out	0x0f, r24	; 15
	SPDR=0XFF;
	while(!(SPSR & (1<<SPIF)));
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <master_rx+0x4>
	return SPDR;
 18a:	8f b1       	in	r24, 0x0f	; 15
}
 18c:	08 95       	ret

0000018e <main>:

void main()
{
 18e:	1f 93       	push	r17

	DDRD=0XFF;
 190:	1f ef       	ldi	r17, 0xFF	; 255
 192:	11 bb       	out	0x11, r17	; 17
	
	lcd_initialize();
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_initialize>
	lcd_cmd(0x80);
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_string("lokesh");
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_string>
#include<avr/interrupt.h>
#include<util/delay.h>

void master_ini()
{
	DDRB=(1<<PB4)|(1<<PB5)|(1<<PB7);
 1a6:	80 eb       	ldi	r24, 0xB0	; 176
 1a8:	87 bb       	out	0x17, r24	; 23
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
 1aa:	82 e5       	ldi	r24, 0x52	; 82
 1ac:	8d b9       	out	0x0d, r24	; 13
 1ae:	84 ec       	ldi	r24, 0xC4	; 196
 1b0:	99 e0       	ldi	r25, 0x09	; 9
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x24>
	SPDR=data;
	while(!(SPSR & (1<<SPIF)));
}
char master_rx()
{
	SPDR=0XFF;
 1b6:	1f b9       	out	0x0f, r17	; 15
	while(!(SPSR & (1<<SPIF)));
 1b8:	77 9b       	sbis	0x0e, 7	; 14
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <main+0x2a>
	return SPDR;
 1bc:	1f b1       	in	r17, 0x0f	; 15
	master_ini();
	_delay_ms(10);
	
	
	char a=master_rx();
	lcd_cmd(0xc7);
 1be:	87 ec       	ldi	r24, 0xC7	; 199
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_num(a);
 1c4:	81 2f       	mov	r24, r17
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_num>


}
 1cc:	1f 91       	pop	r17
 1ce:	08 95       	ret

000001d0 <__udivmodhi4>:
 1d0:	aa 1b       	sub	r26, r26
 1d2:	bb 1b       	sub	r27, r27
 1d4:	51 e1       	ldi	r21, 0x11	; 17
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <__udivmodhi4_ep>

000001d8 <__udivmodhi4_loop>:
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	a6 17       	cp	r26, r22
 1de:	b7 07       	cpc	r27, r23
 1e0:	10 f0       	brcs	.+4      	; 0x1e6 <__udivmodhi4_ep>
 1e2:	a6 1b       	sub	r26, r22
 1e4:	b7 0b       	sbc	r27, r23

000001e6 <__udivmodhi4_ep>:
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	5a 95       	dec	r21
 1ec:	a9 f7       	brne	.-22     	; 0x1d8 <__udivmodhi4_loop>
 1ee:	80 95       	com	r24
 1f0:	90 95       	com	r25
 1f2:	bc 01       	movw	r22, r24
 1f4:	cd 01       	movw	r24, r26
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
