
LEDtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000112  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b5  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000128  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000038  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>

int main()
{    
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
      int i, j ;
     DDRC=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 bb       	out	0x14, r24	; 20
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	c8 ea       	ldi	r28, 0xA8	; 168
  a0:	d1 e6       	ldi	r29, 0x61	; 97
     while(1)
	 {
     for( i=0,j=128; i<=128&&j>=0;)
      {
         PORTC= i ;
  a2:	15 ba       	out	0x15, r1	; 21
  a4:	fe 01       	movw	r30, r28
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x14>
         _delay_ms(100);
	//	 PORTC= j ;
    //     _delay_ms(100);

		 i=i*2; 
		 j=j/2;
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	0e 94 5f 00 	call	0xbe	; 0xbe <__divmodhi4>
  b2:	cb 01       	movw	r24, r22
{    
      int i, j ;
     DDRC=0xFF;
     while(1)
	 {
     for( i=0,j=128; i<=128&&j>=0;)
  b4:	77 ff       	sbrs	r23, 7
  b6:	f5 cf       	rjmp	.-22     	; 0xa2 <main+0x10>
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	f2 cf       	rjmp	.-28     	; 0xa2 <main+0x10>

000000be <__divmodhi4>:
  be:	97 fb       	bst	r25, 7
  c0:	09 2e       	mov	r0, r25
  c2:	07 26       	eor	r0, r23
  c4:	0a d0       	rcall	.+20     	; 0xda <__divmodhi4_neg1>
  c6:	77 fd       	sbrc	r23, 7
  c8:	04 d0       	rcall	.+8      	; 0xd2 <__divmodhi4_neg2>
  ca:	0c d0       	rcall	.+24     	; 0xe4 <__udivmodhi4>
  cc:	06 d0       	rcall	.+12     	; 0xda <__divmodhi4_neg1>
  ce:	00 20       	and	r0, r0
  d0:	1a f4       	brpl	.+6      	; 0xd8 <__divmodhi4_exit>

000000d2 <__divmodhi4_neg2>:
  d2:	70 95       	com	r23
  d4:	61 95       	neg	r22
  d6:	7f 4f       	sbci	r23, 0xFF	; 255

000000d8 <__divmodhi4_exit>:
  d8:	08 95       	ret

000000da <__divmodhi4_neg1>:
  da:	f6 f7       	brtc	.-4      	; 0xd8 <__divmodhi4_exit>
  dc:	90 95       	com	r25
  de:	81 95       	neg	r24
  e0:	9f 4f       	sbci	r25, 0xFF	; 255
  e2:	08 95       	ret

000000e4 <__udivmodhi4>:
  e4:	aa 1b       	sub	r26, r26
  e6:	bb 1b       	sub	r27, r27
  e8:	51 e1       	ldi	r21, 0x11	; 17
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__udivmodhi4_ep>

000000ec <__udivmodhi4_loop>:
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	a6 17       	cp	r26, r22
  f2:	b7 07       	cpc	r27, r23
  f4:	10 f0       	brcs	.+4      	; 0xfa <__udivmodhi4_ep>
  f6:	a6 1b       	sub	r26, r22
  f8:	b7 0b       	sbc	r27, r23

000000fa <__udivmodhi4_ep>:
  fa:	88 1f       	adc	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	5a 95       	dec	r21
 100:	a9 f7       	brne	.-22     	; 0xec <__udivmodhi4_loop>
 102:	80 95       	com	r24
 104:	90 95       	com	r25
 106:	bc 01       	movw	r22, r24
 108:	cd 01       	movw	r24, r26
 10a:	08 95       	ret

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
