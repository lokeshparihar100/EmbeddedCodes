
LinerFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a9  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b5  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000187  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d0  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRC=0XFF;
	DDRA=0X00;
  96:	1a ba       	out	0x1a, r1	; 26

	if(PINA==0b00000010)
  98:	89 b3       	in	r24, 0x19	; 25
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x10>
	{
		PORTC=0b00000101;  //forward
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	0f c0       	rjmp	.+30     	; 0xc0 <main+0x2e>
		_delay_ms(20);
		PORTC=0X00;
		_delay_ms(30);
	}
	else if(PINA==0b00000001)
  a2:	89 b3       	in	r24, 0x19	; 25
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x1a>
	{
		PORTC=0b00001001;  //Right Turn
  a8:	89 e0       	ldi	r24, 0x09	; 9
  aa:	0a c0       	rjmp	.+20     	; 0xc0 <main+0x2e>
		_delay_ms(20);
		PORTC=0X00;
		_delay_ms(30);
	}
	else if(PINA==0b00000110||PINA==0b00000011||PINA==0b00000100)
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	86 30       	cpi	r24, 0x06	; 6
  b0:	31 f0       	breq	.+12     	; 0xbe <main+0x2c>
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	19 f0       	breq	.+6      	; 0xbe <main+0x2c>
  b8:	89 b3       	in	r24, 0x19	; 25
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	61 f4       	brne	.+24     	; 0xd6 <main+0x44>
	{
		PORTC=0b00000110;  //Left Turn
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	88 e8       	ldi	r24, 0x88	; 136
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x34>
		_delay_ms(20);
		PORTC=0X00;
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	8c e4       	ldi	r24, 0x4C	; 76
  ce:	9d e1       	ldi	r25, 0x1D	; 29
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3e>
  d4:	08 95       	ret
		_delay_ms(30);
	}
	else if(PINA==0b00000101)
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	59 f4       	brne	.+22     	; 0xf2 <main+0x60>
	{
		PORTC=0b00001001;  //Right Turn
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	85 bb       	out	0x15, r24	; 21
  e0:	88 e8       	ldi	r24, 0x88	; 136
  e2:	93 e1       	ldi	r25, 0x13	; 19
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x52>
		_delay_ms(20);
		PORTC=0X00;
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	8c e4       	ldi	r24, 0x4C	; 76
  ec:	9d e1       	ldi	r25, 0x1D	; 29
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x5c>
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
